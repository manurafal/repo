import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import base64
import os
import re
import glob
import sqlite3
import sys
import unicodedata
import urlparse
from urlparse import parse_qsl
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
import datetime
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import anor
import traceback
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
import ithil
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
__settings__ = xbmcaddon . Addon ( id = "plugin.video.palantir" )
if 85 - 85: oo
def OoOoOo ( value ) :
 if not value or value == 'none' :
  if 73 - 73: Ii1I / I1IiI1III11i + ooOooO0OOO % IiII1i1I / oo0o % IiII1i1I
  return 'gold'
 else :
  if 67 - 67: i1iI1 + i1iI1 % oo0o * ii1I1ii1IiIi1
  try :
   return value . split ( ']' ) [ 1 ] . split ( '[' ) [ 0 ]
  except :
   if 85 - 85: IIoooO0ooO0oo . IiII1i1I
   return value
   if 8 - 8: oOO * Ii
   if 26 - 26: o00oO0oo0O0O0 - IIoooO0ooO0oo
try :
 O0O000000Oo = xbmc . translatePath ( __settings__ . getSetting ( 'MainView' ) )
 I1II = xbmc . translatePath ( __settings__ . getSetting ( 'DownView' ) )
 I1iI1iiiIiI1 = xbmc . translatePath ( __settings__ . getSetting ( 'FavView' ) )
 OO0O0 = xbmc . translatePath ( __settings__ . getSetting ( 'PelisView' ) )
 ii1i1ii1I = xbmc . translatePath ( __settings__ . getSetting ( 'EpisodesView' ) )
 o0o0000O0 = xbmc . translatePath ( __settings__ . getSetting ( 'ListView' ) )
 oO0O0o0ooO = xbmc . translatePath ( __settings__ . getSetting ( 'SeriesView' ) )
 i1IiI1iii = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'MenuColor' ) ) )
 iii1II = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'TagColor' ) ) )
 I111i11I1I = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'ServerColor' ) ) )
 i11ii = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'AltColor' ) ) )
 o0O0oO0 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'AudioColor' ) ) )
 IIIi1111iI = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'CategoryColor' ) ) )
 iiIIiiiI11 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'DateColor' ) ) )
 O00O000 = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'CapiColor' ) ) )
 O0OOO = OoOoOo ( xbmc . translatePath ( __settings__ . getSetting ( 'PeliColor' ) ) )
 if 4 - 4: ooOooO0OOO
 if not o0o0000O0 or o0o0000O0 == 'none' :
  o0o0000O0 = '502'
 if not oO0O0o0ooO or oO0O0o0ooO == 'none' :
  oO0O0o0ooO = '515'
 if not O0O000000Oo or O0O000000Oo == 'none' :
  O0O000000Oo = '500'
 if not I1II or I1II == 'none' :
  I1II = '500'
 if not I1iI1iiiIiI1 or I1iI1iiiIiI1 == 'none' :
  I1iI1iiiIiI1 = '500'
 if not OO0O0 or OO0O0 == 'none' :
  OO0O0 = '502'
 if not ii1i1ii1I or ii1i1ii1I == 'none' :
  ii1i1ii1I = '502'
except :
 xbmc . log ( 'ERROR Procesing initial configuration' )
 traceback . print_exc ( file = sys . stdout )
 if 53 - 53: ooOooO0OOO
 if 85 - 85: ooOooO0OOO + IIII
 if 32 - 32: IiII1i1I - iiIIi1i1Iii * II + OOO - iiIIi1i1Iii
try :
 import json
except :
 import simplejson as json
 if 28 - 28: IIII
def OoooO0O ( s ) :
 if 95 - 95: IiII1IiI % I1IiI1III11i
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 39 - 39: IIoooO0ooO0oo
 if 40 - 40: ii1I1ii1IiIi1 * oo / I1
def I1iII1i1i ( bas ) :
 ithil . III1I1iI1I1iI ( bas )
 if 41 - 41: i1iI1 - OOO % ooOooO0OOO - IIoooO0ooO0oo + ooOooO0OOO
 if 33 - 33: oo + oOO / ooOooO0OOO + Ii + ii1I1ii1IiIi1 . ii1I1ii1IiIi1
def III11Ii ( ) :
 import xbmc
 oO0 = xbmc . Keyboard ( "" )
 oO0 . doModal ( )
 i1IiI11i1Iii = ''
 if ( oO0 . isConfirmed ( ) ) :
  i1IiI11i1Iii = oO0 . getText ( )
 return i1IiI11i1Iii
 if 71 - 71: OOoOoO0o0o0OO * oOO * Ii
 if 92 - 92: o00oO0oo0O0O0 . oo0o * OOO * Ii / oo
 if 100 - 100: I1 * OOoOoO0o0o0OO
oooOOO = 'utf-8'
ii = '.tmp'
oOOO0O0 = 'action'
OOO00Ooo0 = xbmcaddon . Addon ( )
IiIi = OOO00Ooo0 . getAddonInfo ( 'version' )
I1i11iIi11Ii1I1 = xbmc . translatePath ( OOO00Ooo0 . getAddonInfo ( 'path' ) . decode ( oooOOO ) )
oOoO = xbmc . translatePath ( OOO00Ooo0 . getAddonInfo ( 'profile' ) . decode ( oooOOO ) )
iii11i1IIi = os . path . join ( I1i11iIi11Ii1I1 , "resources/media/" )
if 4 - 4: oo0o % IiII1IiI
i11i = base64 . urlsafe_b64decode ( 'JXMvbW9yaWElcw==' ) % ( oOoO , ii )
iIiIiiiIi1I1I = '%s/bree.fav' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iiI1IiI1iiII1 = '%s/bree.favd' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iIIiIiI1I1I = '%s/bree.favp' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iiIii1IIi1I = '%s/bree.favs' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
iIiiIi1i1i1i1 = '%s/bree.dwn' % xbmc . translatePath ( __settings__ . getSetting ( 'favPath' ) )
IIi11Ii1 = [ "serie_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "has_content" , "audio" ,
 "category" , "date(updated)" , "tmdb" ]
O0Oo0oOO = [ "peli_id" , "nombre" , "link" , "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "'N'" , "audio" , "category" ,
 "date(updated)" , "active" ]
iiI1111IIiiI = [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" ,
 "sinopsis" ,
 "caratula" , "poster" , "updated" , "puntos" , "category" , "active" , "tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ]
ooo0ooOoO0Oo = 200
IIIi11 = ", CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa "
Iii1 = 'series'
IiIIi1I1Ii = 'pelisGroup'
if 97 - 97: IIII . Ii1I * oo
if not os . path . exists ( oOoO ) :
 try :
  os . makedirs ( oOoO )
 except :
  pass
I1iI11I = sys . argv [ 0 ]
iiIIiiII1 = int ( sys . argv [ 1 ] )
try :
 if 66 - 66: i1iI1 % I1 * I1
 OOo0oo = anor . I1i1I1iI11I ( base64 . urlsafe_b64decode (
 'c2VsZWN0IGlkUGF0aCBmcm9tIHBhdGggd2hlcmUgc3RyUGF0aD0icGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLyI=' ) ) [ 1 ] [ 0 ] [ 0 ]
except :
 OOo0oo = 0
 if 6 - 6: IiII1i1I / oOO / Ii1I
 if 10 - 10: oooOoO + oo * oo
def ooo0 ( path , type = 'r' ) :
 oOOoO00oO0 = open ( str ( path ) , type )
 O0OOo0oo00O0O = oOOoO00oO0 . read ( )
 oOOoO00oO0 . close ( )
 return O0OOo0oo00O0O
 if 79 - 79: Ii1I + OOO + IiII1IiI - II . ii1I1ii1IiIi1 / II
 if 23 - 23: o00oO0oo0O0O0 - ii1I1ii1IiIi1 . Ii1I + oooOoO
if os . path . exists ( iIiIiiiIi1I1I ) == True :
 i11iii = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iIiIiiiIi1I1I ) ) )
else :
 i11iii = { }
 if 78 - 78: I1IiI1III11i + OOO - oOO
if os . path . exists ( iIIiIiI1I1I ) == True :
 IiiIi11iIII1 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iIIiIiI1I1I ) ) )
else :
 IiiIi11iIII1 = { }
 if 42 - 42: Ii1I * oooOoO . IiII1IiI + IIII * OOoOoO0o0o0OO
if os . path . exists ( iiI1IiI1iiII1 ) == True :
 ooIIII = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iiI1IiI1iiII1 ) ) )
else :
 ooIIII = { }
 if 56 - 56: IiII1i1I % IiII1IiI . II / OOO
if os . path . exists ( iiIii1IIi1I ) == True :
 i11 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( iiIii1IIi1I ) ) )
else :
 i11 = { }
 if 8 - 8: IiII1IiI + Ii1I * oOO - IiII1i1I - iiIIi1i1Iii
 if 14 - 14: oo / Ii1I / IiII1i1I / II / oOO / o00oO0oo0O0O0
def O000000O0OoOo ( nombre , caratula = None , poster = None , video = { } , isPlayable = False ) :
 OoOO0OO0o0O = xbmcgui . ListItem ( label = nombre , iconImage = caratula )
 if caratula and poster :
  OoOO0OO0o0O . setArt ( IIiiII111i ( caratula , poster ) )
 if len ( video ) > 0 :
  OoOO0OO0o0O . setInfo ( 'video' , video )
 if isPlayable :
  OoOO0OO0o0O . setProperty ( 'IsPlayable' , 'true' )
 return OoOO0OO0o0O
 if 11 - 11: IiII1i1I
def II1Ii11i1Ii1I ( sagaName ) :
 Ii11i1iIiII11 = xbmc . translatePath ( __settings__ . getSetting ( 'favSaga' ) )
 if 62 - 62: iiIIi1i1Iii / i1iI1 % IIII
 Oo00o0O0oOo0 = [ ]
 if Ii11i1iIiII11 == '' or Ii11i1iIiII11 == 'false' :
  Oo00o0O0oOo0 = [ ( 'Añadir al Menu' , 'XBMC.RunPlugin(%s?action=to_saga&saga=%s)' % (
 I1iI11I , sagaName ) ) ]
 elif sagaName == Ii11i1iIiII11 :
  Oo00o0O0oOo0 = [ ( 'Eliminar del Menu' , 'XBMC.RunPlugin(%s?action=to_saga&saga=false)' % (
 I1iI11I ) ) ]
 return Oo00o0O0oOo0
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
def O0oo00 ( sagaName ) :
 if 80 - 80: IiII1IiI * iiIIi1i1Iii / oOO / I1IiI1III11i / OOO + o00oO0oo0O0O0
 if sagaName :
  __settings__ . setSetting ( 'favSaga' , sagaName )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 81 - 81: II - ii1I1ii1IiIi1 / Ii1I + oooOoO
  if 51 - 51: IiII1IiI + II + oo0o . II
  if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
  if 90 - 90: I1 - oo0o % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
def Iiooo ( idFile , idPath , fileName , to_watch ) :
 if to_watch :
  Oo00o0O0oOo0 = ( 'Marcar como visto' , 'XBMC.RunPlugin(%s?action=to_watch&idFile=%s&idPath=%s&fileName=%s)' % (
 I1iI11I , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 else :
  if 10 - 10: IIII
  Oo00o0O0oOo0 = ( 'Marcar como no visto' ,
 'XBMC.RunPlugin(%s?action=to_unwatch&idFile=%s&idPath=%s&fileName=%s)' % (
 I1iI11I , idFile , idPath , base64 . urlsafe_b64encode ( fileName ) ) )
 return Oo00o0O0oOo0
 if 72 - 72: oOO - OOO . oooOoO
 if 60 - 60: oooOoO / ii1I1ii1IiIi1 * oooOoO
def i1II1 ( idFile , idPath , fileName , to_watch ) :
 fileName = base64 . urlsafe_b64decode ( fileName )
 if to_watch :
  iiIiIiiiI = 1
 else :
  iiIiIiiiI = 0
 if int ( idFile ) > 0 :
  I1I = "update files set playCount=%s where idFile=%s AND idPath=%s AND strFilename='%s'" % (
 iiIiIiiiI , idFile , idPath , fileName )
 else :
  I1I = "insert into files (idFile, idPath, strFilename, playCount, lastPlayed) VALUES (%s, %s, '%s', %s, %s)" % (
 '(select max (idFile) +1 from files)' , idPath , fileName , iiIiIiiiI , "datetime('now')" )
 anor . I1i1I1iI11I ( I1I )
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 79 - 79: II
 if 18 - 18: II + I1 % iiIIi1i1Iii - Ii * IIII . IiII1i1I
def O0O000o ( ) :
 iIIiIII1i = [ '%s/bree.fav' % oOoO , '%s/bree.favd' % oOoO , '%s/bree.favp' % oOoO , '%s/bree.favs' % oOoO , '%s/bree.dwn' % oOoO , '%s/settings.xml' % oOoO ]
 if 9 - 9: i1iI1 . i1iI1
 if 1 - 1: iiIIi1i1Iii . ooOooO0OOO / ooOooO0OOO
 if 82 - 82: IiII1IiI . II . IiII1i1I - I1IiI1III11i
 IIIII = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 import zipfile
 import time
 if IIIII :
  IIIII = xbmc . translatePath ( IIIII )
  if 39 - 39: oOO * IIII % Ii1I - oo0o / OOoOoO0o0o0OO
  OOo0o = "%s/Palantir_Backup_%s.zip" % ( IIIII , time . strftime ( "%d-%m-%Y_%H%M%S" ) )
  OoO0O = zipfile . ZipFile ( OOo0o , "w" )
  for OoOoOOo0OO0 in iIIiIII1i :
   if os . path . exists ( OoOoOOo0OO0 ) :
    ooo00o0O0o0o = OoOoOOo0OO0 . split ( '/' )
    OoO0O . write ( OoOoOOo0OO0 , ooo00o0O0o0o [ len ( ooo00o0O0o0o ) - 1 ] , compress_type = zipfile . ZIP_DEFLATED )
  OoO0O . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Realizada en : %s' % OOo0o , xbmcgui . NOTIFICATION_INFO , 10000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Establezca la ruta para la copia' , xbmcgui . NOTIFICATION_INFO , 7000 )
  if 42 - 42: i1iI1 / i1iI1 + oooOoO / o00oO0oo0O0O0
  if 90 - 90: oo0o * oo0o % ii1I1ii1IiIi1
  if 86 - 86: OOoOoO0o0o0OO . IiII1IiI - OOO - IIII
def oOOoOO ( ) :
 iII1iIIiIi11I = xbmc . translatePath ( __settings__ . getSetting ( 'copyPath' ) )
 IiI1iI = xbmcgui . Dialog ( )
 try :
  IIIII = IiI1iI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False , defaultt = iII1iIIiIi11I ,
 enableMultiple = False )
 except TypeError :
  IIIII = IiI1iI . browse ( type = 1 , heading = __settings__ . getLocalizedString ( 34003 ) ,
 s_shares = 'files' , mask = '.zip' , useThumbs = False , treatAsFolder = False ,
 defaultt = iII1iIIiIi11I ,
 enableMultiple = False )
 if 'Palantir_Backup_' in IIIII :
  import zipfile
  iI = zipfile . ZipFile ( IIIII , 'r' )
  iI . extractall ( oOoO )
  iI . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Copia Restaurada : %s' % IIIII , xbmcgui . NOTIFICATION_INFO , 7000 )
 elif IIIII . endswith ( '.zip' ) :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'El fichero debe ser Palantir_Backup_... Invalido %s' % IIIII , xbmcgui . NOTIFICATION_WARNING , 7000 )
  if 4 - 4: IiII1i1I / OOoOoO0o0o0OO - Ii1I - I1IiI1III11i
  if 22 - 22: oo0o * oOO . Ii1I - i1iI1 - Ii - o00oO0oo0O0O0
  if 23 - 23: ii1I1ii1IiIi1 + ooOooO0OOO + OOoOoO0o0o0OO
  if 63 - 63: Ii1I - Ii1I * i1iI1 . Ii - o00oO0oo0O0O0
  if 2 - 2: oooOoO + ii1I1ii1IiIi1 . IiII1IiI % i1iI1
def IiIIiI ( id , type , nombre , url , caratula , poster , remove ) :
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
  if 72 - 72: IIoooO0ooO0oo
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if not remove :
  Oo00o0O0oOo0 = ( 'Descarga en Palantir' ,
 'XBMC.RunPlugin(%s?action=addDownload&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s)' % (
 I1iI11I , id , base64 . urlsafe_b64encode ( nombre ) , url , base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
 else :
  Oo00o0O0oOo0 = ( 'Borrar descarga' ,
 'XBMC.RunPlugin(%s?action=rmDownload&id=%s&nombre=%s&caratula=%s&poster=%s&type=%s)' % (
 I1iI11I , id , base64 . urlsafe_b64encode ( nombre ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type ) )
  if 64 - 64: OOoOoO0o0o0OO . II % IIII
 return Oo00o0O0oOo0
 if 16 - 16: IiII1IiI * I1 * I1
def oooo0o ( options ) :
 if 66 - 66: I1 / oooOoO
 try :
  i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
  OOO00oO00OoO0 = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
  if 23 - 23: Ii1I % II / oooOoO
  if 82 - 82: ii1I1ii1IiIi1 % IIoooO0ooO0oo
  if 11 - 11: OOO / i1iI1 - ooOooO0OOO / oooOoO
  if 90 - 90: oo * IIII + OOO % IIII - oOO
  if 70 - 70: IIII + ii1I1ii1IiIi1 * IiII1i1I % ooOooO0OOO + OOoOoO0o0o0OO - I1
  os . remove ( '%s%s' % ( i1II11II11I , base64 . urlsafe_b64decode ( options [ 'nombre' ] ) ) )
  OOO00oO00OoO0 . pop ( options [ 'nombre' ] , None )
  Oo0 = open ( iIiiIi1i1i1i1 , "w" )
  Oo0 . write ( json . dumps ( OOO00oO00OoO0 ) )
  if 62 - 62: oo0o % ooOooO0OOO - i1iI1 / i1iI1 . iiIIi1i1Iii
  Oo0 . close ( )
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 except :
  traceback . print_exc ( file = sys . stdout )
  xbmc . log ( '[addon.Palantir] Error Ops %s' % options )
  return
  if 80 - 80: OOoOoO0o0o0OO / IIII * Ii1I % oooOoO . o00oO0oo0O0O0
def OOoO0oo0oo00 ( download_file ) :
 o00O0o00o = __settings__ . getSetting ( 'MaxNumDownloads' )
 i1 = __settings__ . getSetting ( 'MaxSizeDownloads' )
 if 29 - 29: II * Ii + II . oo * IiII1i1I
 if 98 - 98: ooOooO0OOO % II / oo / IiII1i1I
 if 57 - 57: IIII . II
 if 53 - 53: IIII + oo * i1iI1 . oOO - IiII1IiI . IIII
 Oo00o000O = set ( )
 i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 for Oo0Oo0 in download_file . keys ( ) :
  Oo00o000O . add ( Oo0Oo0 )
  if 42 - 42: iiIIi1i1Iii % o00oO0oo0O0O0 - OOoOoO0o0o0OO
 iii = set ( )
 if 36 - 36: oooOoO
 OOOo00ooo0Oo = oOo ( confirmationMessage = False )
 if 16 - 16: II . I1IiI1III11i
 OO = 0
 if OOOo00ooo0Oo :
  for iiiIiIi1I in os . listdir ( i1II11II11I ) :
   iii . add ( os . path . splitext ( iiiIiIi1I ) [ 0 ] )
   if 50 - 50: II - I1IiI1III11i * ooOooO0OOO / IIII . ooOooO0OOO . IiII1i1I
  if int ( o00O0o00o ) <= len ( Oo00o000O & set ( iii ) ) and int ( o00O0o00o ) < 11 :
   o0 = 'Maximo numero de descargas superado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   return False
   if 46 - 46: oo0o * ii1I1ii1IiIi1 . oooOoO * oOO % OOO
  OO = sum ( os . path . getsize ( '%s%s' % ( i1II11II11I , f ) ) for f in os . listdir ( i1II11II11I ) if os . path . isfile ( '%s%s' % ( i1II11II11I , f ) ) and os . path . splitext ( f ) [ 0 ] in Oo00o000O )
  if 57 - 57: i1iI1 - IIII - II * iiIIi1i1Iii * IIII
  if 49 - 49: I1IiI1III11i + iiIIi1i1Iii
  if i1 != '6' and i1 != 'Ilimitado' and i1 != 'Unlimited' :
   if i1 == '0' :
    i1 = 1024
   elif i1 == '1' :
    i1 = 1024 * 2
   elif i1 == '2' :
    i1 = 1024 * 3
   elif i1 == '3' :
    i1 = 1024 * 5
   elif i1 == '4' :
    i1 = 1024 * 10
   elif i1 == '5' :
    i1 = 1024 * 20
   else :
    i1 = i1 . replace ( 'GB' , '' )
   if int ( OO ) / 1048576 > int ( i1 ) :
    o0 = 'Tamaño maximo para descargas superado'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
    OOOo00ooo0Oo = False
    if 19 - 19: ooOooO0OOO . OOoOoO0o0o0OO / Ii + IIII
  return OOOo00ooo0Oo
 else :
  return False
  if 87 - 87: ii1I1ii1IiIi1
  if 65 - 65: OOO / oo / oo % iiIIi1i1Iii
def IiIiII1I1Ii ( options ) :
 OOO00oO00OoO0 = { }
 if 48 - 48: oooOoO * IIoooO0ooO0oo * Ii + IIoooO0ooO0oo
 if os . path . exists ( iIiiIi1i1i1i1 ) :
  OOO00oO00OoO0 = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
 if OOoO0oo0oo00 ( OOO00oO00OoO0 ) :
  Oo0o0oO = OoooO0O ( unicode ( base64 . urlsafe_b64decode ( options [ 'nombre' ] ) . decode ( 'utf-8' ) ) )
  I11 = base64 . urlsafe_b64encode ( Oo0o0oO )
  if 74 - 74: IIII * Ii * iiIIi1i1Iii - IIoooO0ooO0oo
  i1iIIIiii1 , IiIiIi1iI1 = os . path . splitext ( Oo0o0oO )
  if 53 - 53: IiII1i1I / ii1I1ii1IiIi1 / o00oO0oo0O0O0 - OOO * ooOooO0OOO + oo0o
  if Oo0o0oO . endswith ( IiIiIi1iI1 ) :
   Oo0o0oO = i1iIIIiii1
   if 90 - 90: IiII1i1I + IIoooO0ooO0oo / oooOoO + OOO * Ii1I % iiIIi1i1Iii
  OOO00oO00OoO0 [ Oo0o0oO ] = (
 options [ 'id' ] , Oo0o0oO , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OoOoOOo0OO0 = open ( iIiiIi1i1i1i1 , "w" )
  if 97 - 97: OOoOoO0o0o0OO * II . I1 + I1IiI1III11i
  OoOoOOo0OO0 . write ( json . dumps ( OOO00oO00OoO0 ) )
  OoOoOOo0OO0 . close ( )
  return True
 else :
  return False
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 82 - 82: II + ii1I1ii1IiIi1 % iiIIi1i1Iii . II
 if 59 - 59: oooOoO * IiII1IiI / IiII1IiI + II % ii1I1ii1IiIi1 % IIII
def Iii1oO00o0000OO0O ( ) :
 i1Ii11i = [ ]
 i1II11II11I = xbmc . translatePath ( __settings__ . getSetting ( 'DownloadPath' ) )
 if os . path . exists ( iIiiIi1i1i1i1 ) == False :
  OoOoOOo0OO0 = open ( iIiiIi1i1i1i1 , "w" )
  OoOoOOo0OO0 . write ( json . dumps ( { } ) )
  if 86 - 86: IiII1IiI
  OoOoOOo0OO0 . close ( )
 else :
  if 8 - 8: oo0o - II + oo0o
  items = json . loads ( ooo0 ( iIiiIi1i1i1i1 ) )
  if 25 - 25: ii1I1ii1IiIi1 + I1 / oooOoO
  for iIi , I1iII1II1iII in items . copy ( ) . iteritems ( ) :
   OoOoOoo0000o = I1iII1II1iII [ 0 ] . encode ( 'utf-8' )
   IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' , 'ignore' )
   if 42 - 42: oOO . OOO / IiII1IiI % IIoooO0ooO0oo
   if 7 - 7: oo / Ii - OOO
   if 25 - 25: IIoooO0ooO0oo . oOO / IiII1i1I / IIII
   if 95 - 95: oOO / II * ii1I1ii1IiIi1 - oo + IiII1IiI
   i1iI1oOoOo0O0 = os . path . splitext ( i1II11II11I ) [ 0 ] + re . sub ( r'(?<!\[)\]' , '[]]' , re . sub ( r'\[' , '[[]' , IIIii1I1ii ) ) + '.*'
   O0OOO0oo = glob . glob ( i1iI1oOoOo0O0 )
   if 92 - 92: ooOooO0OOO . I1
   if len ( O0OOO0oo ) > 0 :
    O0OOO0oo = O0OOO0oo [ 0 ]
    IIIii1I1ii = IIIii1I1ii + ( os . path . splitext ( O0OOO0oo ) [ 1 ] ) . encode ( 'utf-8' , 'ignore' )
    if 98 - 98: IiII1IiI
   else :
    O0OOO0oo = ''
    if 92 - 92: o00oO0oo0O0O0 - OOO * Ii
   if not os . path . exists ( O0OOO0oo ) :
    if 97 - 97: IIoooO0ooO0oo % II - oo / i1iI1 * oOO % oo
    items . pop ( IIIii1I1ii , None )
   else :
    I1IiI1111111 = I1iII1II1iII [ 2 ] . encode ( 'utf-8' )
    Ii11I11Ii11I = I1iII1II1iII [ 3 ] . encode ( 'utf-8' )
    oooOO0OO0 = I1iII1II1iII [ 4 ] . encode ( 'utf-8' )
    II1II1I11 = base64 . urlsafe_b64decode ( Ii11I11Ii11I )
    I1IiiiIIIII1 = base64 . urlsafe_b64decode ( I1IiI1111111 )
    if 6 - 6: oOO % ooOooO0OOO * oo0o . OOO
    o0OOo0OoOoOo = False
    if len ( OoOoOoo0000o . split ( '-' ) ) == 3 :
     o0OOo0OoOoOo = True
     if 71 - 71: oooOoO * Ii / ii1I1ii1IiIi1 - ooOooO0OOO
     if 72 - 72: oo0o . IiII1IiI * I1IiI1III11i * ooOooO0OOO + Ii % IIII
    OoOO0OO0o0O = O000000O0OoOo ( nombre = IIIii1I1ii , caratula = I1IiiiIIIII1 , poster = II1II1I11 , isPlayable = o0OOo0OoOoOo )
    OoOO0OO0o0O . addContextMenuItems ( [ IiIIiI ( id = str ( I1iII1II1iII [ 0 ] ) , nombre = IIIii1I1ii , url = base64 . urlsafe_b64encode ( '%s%s' % ( i1II11II11I , IIIii1I1ii ) ) ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = True , type = oooOO0OO0 ) ] )
    I1Iiii = '{0}?{1}=playLocal&path={2}&tit={3}' . format ( I1iI11I , oOOO0O0 , base64 . urlsafe_b64encode ( O0OOO0oo ) , base64 . urlsafe_b64encode ( IIIii1I1ii ) )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , not o0OOo0OoOoOo ) )
    if 25 - 25: o00oO0oo0O0O0 . oo
  Oo0 = open ( iIiiIi1i1i1i1 , "w" )
  if 28 - 28: OOO . I1IiI1III11i / iiIIi1i1Iii + Ii1I * oOO + oooOoO
  Oo0 . write ( json . dumps ( items ) )
  Oo0 . close ( )
 try :
  if 47 - 47: o00oO0oo0O0O0 + oo0o - IIoooO0ooO0oo . i1iI1 / Ii1I
  OOo000Oo ( I1II )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 96 - 96: ooOooO0OOO . o00oO0oo0O0O0
 if 77 - 77: iiIIi1i1Iii * oooOoO . II
def OoO0ooOOO ( options ) :
 if 22 - 22: o00oO0oo0O0O0 . ooOooO0OOO - ii1I1ii1IiIi1 * oo
 if IiIiII1I1Ii ( options ) :
  ithil . IIi ( options [ 'url' ] , options [ 'nombre' ] , i11i , options [ 'id' ] , options [ 'type' ] , 'download' , options )
  if 65 - 65: iiIIi1i1Iii
def oO0oO ( ) :
 if 45 - 45: Ii - iiIIi1i1Iii . oOO . IiII1IiI / oooOoO * iiIIi1i1Iii
 iii1IiI1111 = xbmcaddon . Addon ( id = "script.module.simple.downloader" )
 O0O0O0O0O = iii1IiI1111 . getAddonInfo ( 'profile' )
 for I11111IiiIII1 in os . listdir ( xbmc . translatePath ( O0O0O0O0O ) ) :
  try :
   if 38 - 38: Ii + ii1I1ii1IiIi1 + Ii1I * I1IiI1III11i . II + II
   os . remove ( '%s%s' % ( xbmc . translatePath ( O0O0O0O0O ) , I11111IiiIII1 ) )
  except :
   if 57 - 57: oo0o + OOoOoO0o0o0OO - oo0o . Ii - IIII
   o0 = 'No se puede borrar el fichero %s ' % I11111IiiIII1
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 5 - 5: IIII + ii1I1ii1IiIi1 + IiII1i1I
   if 11 - 11: OOoOoO0o0o0OO + oooOoO - ooOooO0OOO / IIII . ooOooO0OOO
   if 96 - 96: iiIIi1i1Iii . ooOooO0OOO % Ii1I . iiIIi1i1Iii
   if 1 - 1: IIoooO0ooO0oo % OOoOoO0o0o0OO % oooOoO . oOO
 iI111i = '%s%s' % ( xbmc . translatePath ( 'special://temp' ) , 'commoncache.db' )
 try :
  oOoO0O00000 = sqlite3 . connect ( iI111i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute ( "delete from Downloader" )
  oOoO0O00000 . commit ( )
  oOoO0O00000 . close ( )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Limpieza realizada correctamente' , xbmcgui . NOTIFICATION_INFO , 5000 )
 except :
  traceback . print_exc ( file = sys . stdout )
  o0 = 'No se puede borrar bd commoncache'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 54 - 54: IIII . ooOooO0OOO * OOO - IiII1IiI
def oOo ( confirmationMessage = True ) :
 o00O0o00o = __settings__ . getSetting ( 'MaxNumDownloads' )
 i1 = __settings__ . getSetting ( 'MaxSizeDownloads' )
 iII1iIIiIi11I = __settings__ . getSetting ( 'DownloadPath' )
 if 77 - 77: II * IiII1i1I % I1 + I1 / oOO
 if not iII1iIIiIi11I :
  iII1iIIiIi11I = 'downloads'
 i1II11II11I = xbmc . translatePath ( iII1iIIiIi11I )
 if 21 - 21: I1 . oo0o / IIII % II - I1
 if i1II11II11I . lower ( ) . startswith ( "smb://" ) :
  o0 = 'La ruta Samba no está soportada, seleccione otra ruta para las descargas'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 if not os . path . exists ( i1II11II11I ) :
  try :
   os . mkdir ( i1II11II11I )
  except :
   o0 = 'No existe la ruta %s y no se puede crear.\nRevisa la configuracion y selecciona una ruta con permisos de escritura' % iII1iIIiIi11I
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 78 - 78: oOO
 try :
  OoOoOOo0OO0 = open ( '%s/bolson.test' % i1II11II11I , "w" )
  OoOoOOo0OO0 . write ( 'Test' )
  OoOoOOo0OO0 . close ( )
  try :
   os . remove ( '%s/bolson.test' % i1II11II11I )
   if confirmationMessage :
    o0 = 'Ruta de descargas correcta'
    xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_INFO , 5000 )
   return True
  except :
   o0 = 'No se puede borrar en la carpeta seleccionada'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 except :
  o0 = 'No se puede guardar en la carpeta seleccionada'
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , o0 , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return False
 if 87 - 87: iiIIi1i1Iii * ii1I1ii1IiIi1 / oOO % OOO / OOoOoO0o0o0OO
 if 38 - 38: OOoOoO0o0o0OO * I1 / Ii1I
 if 70 - 70: oooOoO * IiII1IiI . II . Ii1I * I1 + oooOoO
 if 77 - 77: o00oO0oo0O0O0 % I1
def OO0o0O0 ( id , type , nombre , url , caratula , poster , fav = i11iii , text = '' , favLiteral = '' , refresh = None ) :
 if 99 - 99: ooOooO0OOO % oOO
 try :
  nombre = nombre . encode ( 'utf-8' , 'ignore' )
 except ( UnicodeEncodeError , UnicodeDecodeError ) :
  pass
 if not caratula :
  caratula = 'None'
 if not poster :
  poster = 'None'
 if id not in fav :
  if 89 - 89: OOO
  Oo00o0O0oOo0 = ( 'Añadir a favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=addfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&type=%s&text=%s)' % (
 I1iI11I , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , type , text ) )
 else :
  Oo00o0O0oOo0 = ( 'Eliminar de favoritos %s Palantir' % text ,
 'XBMC.RunPlugin(%s?action=rmfav%s&id=%s&nombre=%s&url=%s&caratula=%s&poster=%s&refresh=%s&type=%s&text=%s)' % (
 I1iI11I , favLiteral , id , base64 . urlsafe_b64encode ( nombre ) , base64 . urlsafe_b64encode ( url ) ,
 base64 . urlsafe_b64encode ( caratula ) , base64 . urlsafe_b64encode ( poster ) , refresh , type , text ) )
 return Oo00o0O0oOo0
 if 1 - 1: oo
 if 30 - 30: ooOooO0OOO / IiII1i1I
def OoOOoOO0 ( options , favoritos = iIiIiiiIi1I1I ) :
 OOO00oO00OoO0 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
 OOO00oO00OoO0 . pop ( options [ 'id' ] , None )
 Oo0 = open ( favoritos , "w" )
 Oo0 . write ( base64 . urlsafe_b64encode ( json . dumps ( OOO00oO00OoO0 ) ) )
 Oo0 . close ( )
 if 'refresh' in options and options [ 'refresh' ] :
  xbmc . executebuiltin ( "XBMC.Container.Refresh" )
  if 35 - 35: oo0o % i1iI1 / IiII1i1I
  if 13 - 13: IiII1i1I
def O00000 ( favoritos , fav , favLiteral , text ) :
 i1Ii11i = [ ]
 if os . path . exists ( favoritos ) == False :
  OoOoOOo0OO0 = open ( favoritos , "w" )
  OoOoOOo0OO0 . write ( base64 . urlsafe_b64encode ( json . dumps ( { } ) ) )
  OoOoOOo0OO0 . close ( )
 else :
  items = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
  for iIi in sorted ( items . items ( ) , key = lambda iii1IiI : iii1IiI [ 1 ] [ 1 ] ) :
   I1iII1II1iII = iIi [ 1 ]
   OoOoOoo0000o = I1iII1II1iII [ 0 ] . encode ( 'utf-8' )
   IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' )
   try :
    if 66 - 66: oOO * oOO - ii1I1ii1IiIi1 + Ii - oOO
    IIIii1I1ii = I1iII1II1iII [ 1 ] . encode ( 'utf-8' , 'ignore' )
   except :
    pass
   I1Iiii = I1iII1II1iII [ 2 ] . encode ( 'utf-8' )
   I1IiI1111111 = I1iII1II1iII [ 3 ] . encode ( 'utf-8' )
   Ii11I11Ii11I = I1iII1II1iII [ 4 ] . encode ( 'utf-8' )
   oooOO0OO0 = I1iII1II1iII [ 5 ] . encode ( 'utf-8' )
   II1II1I11 = base64 . urlsafe_b64decode ( Ii11I11Ii11I )
   I1IiiiIIIII1 = base64 . urlsafe_b64decode ( I1IiI1111111 )
   IIIii1I1ii = base64 . urlsafe_b64decode ( IIIii1I1ii )
   o0OOo0OoOoOo = False
   if len ( OoOoOoo0000o . split ( '-' ) ) == 3 and not 'groupId' in base64 . urlsafe_b64decode ( I1Iiii ) :
    o0OOo0OoOoOo = True
   OoOO0OO0o0O = O000000O0OoOo ( nombre = IIIii1I1ii , caratula = I1IiiiIIIII1 , poster = II1II1I11 , isPlayable = o0OOo0OoOoOo )
   OoOO0OO0o0O . addContextMenuItems ( [ OO0o0O0 ( id = str ( I1iII1II1iII [ 0 ] ) , nombre = IIIii1I1ii , url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , refresh = True , type = oooOO0OO0 , fav = fav , text = text , favLiteral = favLiteral ) ] )
   i1Ii11i . append ( ( base64 . urlsafe_b64decode ( I1Iiii ) , OoOO0OO0o0O , not o0OOo0OoOoOo ) )
 try :
  if 44 - 44: II + ii1I1ii1IiIi1
  OOo000Oo ( I1iI1iiiIiI1 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 35 - 35: oo0o + IIII % oo0o % II / OOO % II
 if 84 - 84: oOO
def iioO0oo00O0O ( options , favoritos = iIiIiiiIi1I1I ) :
 iiIIiIIIi = { }
 if os . path . exists ( favoritos ) == False :
  if 89 - 89: iiIIi1i1Iii * II . oo0o / II
  iiIIiIIIi [ options [ 'id' ] ] = (
 options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  OoOoOOo0OO0 = open ( favoritos , "w" )
  OoOoOOo0OO0 . write ( base64 . urlsafe_b64encode ( json . dumps ( iiIIiIIIi ) ) )
  OoOoOOo0OO0 . close ( )
 else :
  OOO00oO00OoO0 = json . loads ( base64 . urlsafe_b64decode ( ooo0 ( favoritos ) ) )
  OOO00oO00OoO0 [ options [ 'id' ] ] = ( options [ 'id' ] , options [ 'nombre' ] , options [ 'url' ] , options [ 'caratula' ] , options [ 'poster' ] , options [ 'type' ] )
  Oo0 = open ( favoritos , "w" )
  Oo0 . write ( base64 . urlsafe_b64encode ( json . dumps ( OOO00oO00OoO0 ) ) )
  Oo0 . close ( )
 if 'text' in options :
  o0Oo = options [ 'text' ]
 else :
  o0Oo = ''
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 iiiIii1IiII = xbmcgui . Dialog ( )
 iiiIii1IiII . notification ( 'Palantir' ,
 'Favorito añadido a [COLOR gold]%s[/COLOR] Palantir' % ( o0Oo ) ,
 xbmcgui . NOTIFICATION_INFO , 3000 )
 if 83 - 83: OOO
def IIiiII111i ( caratula , poster ) :
 if caratula == None :
  caratula = ''
 if poster == None :
  poster = ''
 return { 'icon' : caratula , 'fanart' : poster , 'thumb' : caratula }
 if 49 - 49: oOO + iiIIi1i1Iii * ooOooO0OOO + OOoOoO0o0o0OO
 if 88 - 88: oo0o - II + IiII1IiI . Ii1I % Ii1I / i1iI1
 if 88 - 88: OOO / iiIIi1i1Iii * II
def OOO0oOO0O0oO0 ( dimension ) :
 if dimension :
  IIiiI = dimension . split ( "x" )
  if len ( IIiiI ) == 2 :
   ii11i1I11i = int ( IIiiI [ 0 ] )
   iI1IiI1IIiIi = int ( IIiiI [ 1 ] )
   if ii11i1I11i == 0 or iI1IiI1IIiIi == 0 :
    return ""
   elif ii11i1I11i <= 720 and iI1IiI1IIiIi <= 480 :
    return "[COLOR oldlace](SD)[/COLOR]"
   elif ii11i1I11i <= 768 and iI1IiI1IIiIi <= 576 :
    return "[COLOR moccasin](HD)[/COLOR]"
   elif ii11i1I11i <= 960 and iI1IiI1IIiIi <= 544 :
    return "[COLOR peachpuff](HD)[/COLOR]"
   elif ii11i1I11i <= 1280 and iI1IiI1IIiIi <= 720 :
    return "[COLOR sandybrown](720)[/COLOR]"
   else :
    return "[COLOR chocolate](1080)[/COLOR]"
  else :
   return ""
 return ""
 if 19 - 19: oo0o / oooOoO % o00oO0oo0O0O0 % OOoOoO0o0o0OO / IIII
 if 15 - 15: Ii1I . i1iI1 + Ii . OOoOoO0o0o0OO * IIII . IIoooO0ooO0oo
def i1I ( url ) :
 if 37 - 37: oo0o
 OO0O0OOO = ithil . iII1iIIiIi11I ( i11i , url )
 I1IIi1 = ithil . oo0o00ooO ( i11i , url )
 if I1IIi1 :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario en %s (%s) validado' % ( url , OO0O0OOO [ 0 ] . encode ( 'utf-8' ) ) , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'Usuario en %s (%s) y contraseña no válidas' % ( url , OO0O0OOO [ 0 ] . encode ( 'utf-8' ) ) , xbmcgui . NOTIFICATION_WARNING , 5000 )
  if 74 - 74: IIII - Ii1I / II
  if 7 - 7: OOO
  if 38 - 38: oooOoO / I1 * IIoooO0ooO0oo
def OoOO00oo ( serie_sinop , serie_caratula , serie_poster , temp_sinop , temp_caratula , temp_poster ) :
 OOO00oO00OoO0 = [ ]
 if temp_sinop == None :
  OOO00oO00OoO0 . append ( serie_sinop )
 else :
  OOO00oO00OoO0 . append ( temp_sinop )
 if temp_caratula == None :
  OOO00oO00OoO0 . append ( serie_caratula )
 else :
  OOO00oO00OoO0 . append ( temp_caratula )
 if temp_poster == None :
  OOO00oO00OoO0 . append ( serie_poster )
 else :
  OOO00oO00OoO0 . append ( temp_poster )
 return OOO00oO00OoO0
 if 33 - 33: oo0o * oo / iiIIi1i1Iii / OOO * iiIIi1i1Iii
 if 3 - 3: o00oO0oo0O0O0 * OOoOoO0o0o0OO
 if 5 - 5: IiII1IiI % OOoOoO0o0o0OO
def Ooo00o0oo0o ( operator , value , params ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 oo0 = 1
 if 'page' in params and 'c_page' in params and 'alfa' in params :
  oo0 = int ( params [ 'c_page' ] )
  if 22 - 22: oooOoO * oo0o * I1 . I1IiI1III11i + IiII1IiI
  if 5 - 5: OOO % IiII1IiI
  if 83 - 83: IiII1i1I
  if 75 - 75: IIoooO0ooO0oo . IIoooO0ooO0oo + OOO / Ii - ooOooO0OOO
  IIiIii1IiI1i . execute ( "Select " + "," . join (
 IIi11Ii1 ) + IIIi11 + " from series where lower(category) " + operator + " ? AND alfa >='" + base64 . urlsafe_b64decode (
 params [ 'alfa' ] ) + "' AND active > 0 AND " + base64 . urlsafe_b64decode (
 params [ 'page' ] ) + " order by alfa asc, nombre asc LIMIT " + str ( ooo0ooOoO0Oo ) , ( value , ) )
 else :
  params [ 'c_page' ] = 1
  IIiIii1IiI1i . execute ( "Select " + "," . join (
 IIi11Ii1 ) + IIIi11 + " from series where active > 0 and lower(category) " + operator + " ? order by alfa asc, nombre asc LIMIT " + str (
 ooo0ooOoO0Oo ) , ( value , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 63 - 63: IIII - i1iI1 * I1 % II - oo
 params [ 'actionParams' ] = 'alfa=' + base64 . urlsafe_b64encode ( Ii111I [ 0 ] [ len ( IIi11Ii1 ) ] )
 params [ 'c_page' ] = oo0
 I1IiIiI ( Ii111I , False , True , False , params )
 if 66 - 66: I1 . oOO + oooOoO * ii1I1ii1IiIi1 . OOO
 if 54 - 54: IiII1i1I + OOoOoO0o0o0OO + ooOooO0OOO
def iI1IiiII1iI ( fields , table , categoryCondition ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select " + "," . join ( fields ) + " from " + table + " where active > 0 %s order by updated desc limit %s" % ( categoryCondition , str ( ooo0ooOoO0Oo ) ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 I1IiIiI ( Ii111I , True , True , True )
 if 56 - 56: I1 * ii1I1ii1IiIi1
 if 25 - 25: IIoooO0ooO0oo / i1iI1 / Ii . IIII
def i11iIIi ( order ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select " + "," . join ( IIi11Ii1 ) + " from series where active > 0 order by " + order + " desc, nombre asc limit " + str ( ooo0ooOoO0Oo ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 I1IiIiI ( Ii111I , True , True , False )
 if 48 - 48: oooOoO - oo / o00oO0oo0O0O0 % Ii1I % Ii
def OooOoOooo ( order , params ) :
 if 46 - 46: oooOoO * OOO / IiII1i1I . I1IiI1III11i - Ii1I / OOO
 if 46 - 46: oo0o % oo / i1iI1
 if 52 - 52: oooOoO % OOoOoO0o0o0OO - iiIIi1i1Iii - o00oO0oo0O0O0
 if 51 - 51: oOO
 if 77 - 77: oooOoO - OOO - I1 * I1
 if 11 - 11: Ii1I * oo / OOoOoO0o0o0OO / iiIIi1i1Iii
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb,"
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ ] , [ ] , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , None , None , info = params )
 if 9 - 9: o00oO0oo0O0O0 * oOO + IiII1i1I . OOoOoO0o0o0OO . Ii1I - oo0o
def IIII1I ( serie_attr , type ) :
 oOO0oO = III11Ii ( )
 if oOO0oO :
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  if 91 - 91: OOO - IiII1i1I % iiIIi1i1Iii * ooOooO0OOO / iiIIi1i1Iii
  oOO0oO = '%' + oOO0oO + '%'
  O0o0oooo00 = ''
  if type != Iii1 :
   O0o0oooo00 = ' group by group_id'
  try :
   IIiIii1IiI1i . execute ( "Select " + "," . join (
 serie_attr ) + IIIi11 + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by alfa asc, nombre asc" ,
 ( unicode ( oOO0oO . decode ( 'utf-8' ) ) , ) )
  except :
   IIiIii1IiI1i . execute ( "Select " + "," . join (
 serie_attr ) + IIIi11 + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by alfa asc, nombre asc" ,
 ( OoooO0O ( unicode ( oOO0oO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  if len ( Ii111I ) == 0 :
   IIiIii1IiI1i . execute ( "Select " + "," . join ( serie_attr ) + " from " + type + " where active > 0 and nombre like ? " + O0o0oooo00 + " order by nombre asc" ,
 ( OoooO0O ( unicode ( oOO0oO . decode ( 'utf-8' ) ) ) . upper ( ) , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  if type == Iii1 :
   I1IiIiI ( Ii111I , True , True , False )
  else :
   OooO00OOo0OOO ( Ii111I , 'pelis' , info = { 'puntos' : 'true' , 'anno' : 'true' } )
   if 17 - 17: II * Ii
   if 26 - 26: o00oO0oo0O0O0 + OOO + oo0o / oooOoO - ii1I1ii1IiIi1 / IIII
def O0O00OooO00O ( audio = None , tab = 'series' , params = { } ) :
 if not audio :
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute ( "Select audio,count(audio) from " + tab + " where audio!='ES' and active > 0 group by audio order by audio" )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  i1Ii11i = [ ]
  o00o0O = { }
  for III1I1iI1I1iI in Ii111I :
   if 32 - 32: IIoooO0ooO0oo + IIII
   for II1I1III11Ii1 in III1I1iI1I1iI [ 0 ] . replace ( 'ES' , '' ) . split ( '#' ) :
    if II1I1III11Ii1 and II1I1III11Ii1 not in o00o0O :
     o00o0O [ II1I1III11Ii1 ] = III1I1iI1I1iI [ 1 ]
    elif II1I1III11Ii1 :
     o00o0O [ II1I1III11Ii1 ] = o00o0O [ II1I1III11Ii1 ] + III1I1iI1I1iI [ 1 ]
     if 68 - 68: ooOooO0OOO - oo
     if 84 - 84: I1IiI1III11i + ooOooO0OOO + IIoooO0ooO0oo + Ii * oooOoO - I1
  for II1I1III11Ii1 , iiiO000Oo in o00o0O . iteritems ( ) :
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , II1I1III11Ii1 , iiiO000Oo )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = '' )
   if tab == 'series' :
    I1Iiii = '{0}?action=seriesByLang&lang={1}' . format ( I1iI11I , II1I1III11Ii1 . encode ( 'utf-8' ) )
   else :
    I1Iiii = '{0}?action=pelisByLang&lang={1}' . format ( I1iI11I , II1I1III11Ii1 . encode ( 'utf-8' ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  try :
   if 73 - 73: Ii / I1IiI1III11i . oo . IIII . I1IiI1III11i
   OOo000Oo ( o0o0000O0 )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
  params [ "action" ] = 'pelisByLang'
  if 'page' in params and 'c_page' in params :
   if 68 - 68: Ii / IiII1i1I % IiII1i1I / I1
   params [ "actionParams" ] = 'lang=' + audio
  else :
   params [ "c_page" ] = 1
   params [ "actionParams" ] = 'lang=' + audio
   if 47 - 47: IIoooO0ooO0oo * OOO + I1IiI1III11i
   if 44 - 44: IIII % II + IIII / IiII1IiI / oOO / i1iI1
   if 47 - 47: IiII1IiI % II . IIoooO0ooO0oo * i1iI1 . IIII
  params [ "sql_cond" ] = " active > 0 and audio like '%" + audio . decode ( 'utf-8' ) + "%'"
  if tab == 'series' :
   OO0OoO00O0o = IIi11Ii1 [ : ]
   if 79 - 79: ii1I1ii1IiIi1 * oo
   if 80 - 80: Ii1I . oOO * II - OOoOoO0o0o0OO
   if 6 - 6: oo0o / I1 * ii1I1ii1IiIi1 + ii1I1ii1IiIi1 / I1
   Ii111I = O000o000o0Oo ( "series" , IIi11Ii1 , [ ] , [ ] , [ "nombre" ] , params )
   I1IiIiI ( Ii111I , True , True , False , params )
  else :
   params [ "action" ] = 'pelisByLang'
   params [ "sql_group" ] = ' group_id '
   params [ "puntos" ] = 'true'
   params [ "anno" ] = 'true'
   if params [ "c_page" ] > 1 :
    params [ "sql_cond" ] = params [ "sql_cond" ] + ' and ' + base64 . urlsafe_b64decode ( params [ "page" ] )
    if 22 - 22: IIII - II - I1 - oooOoO + I1 % IiII1i1I
   Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ ] , [ ] , [ "nombre" ] , params )
   OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
   if 82 - 82: II - ooOooO0OOO / oo / II . OOoOoO0o0o0OO
   if 75 - 75: oo0o
def oOOO0o ( params , type ) :
 if 'letra' in params :
  i1ii = params [ 'letra' ]
 else :
  i1ii = None
 I1ii1iiiI = { 'A' : 'unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198' ,
 'E' : 'unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203' ,
 'I' : 'unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207' ,
 'O' : 'unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214' ,
 'U' : 'unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220' }
 ooOOooOO00O = '!0-9..'
 IIi1Ii1i111i = 'unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90'
 if type == 'serie' :
  oOoo = IIi11Ii1
  oOoo . append ( "CASE When unicode(upper(substr(nombre, 1, 1))) >= 192 AND unicode(upper(substr(nombre, 1, 1))) <= 198 Then 'A'When unicode(upper(substr(nombre, 1, 1))) >= 204 AND unicode(upper(substr(nombre, 1, 1))) <= 207 Then 'I'When unicode(upper(substr(nombre, 1, 1))) >= 200 AND unicode(upper(substr(nombre, 1, 1))) <= 203 Then 'E'When unicode(upper(substr(nombre, 1, 1))) >= 217 AND unicode(upper(substr(nombre, 1, 1))) <= 220 Then 'U'When unicode(upper(substr(nombre, 1, 1))) >= 210 AND unicode(upper(substr(nombre, 1, 1))) <= 214 Then 'O' WHEN unicode(upper(substr(nombre, 1, 1))) >= 65 AND unicode(upper(substr(nombre, 1, 1))) <= 90 THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa " )
  I1IiiII11 = ''
 else :
  oOoo = O0Oo0oOO
  I1IiiII11 = 'group by group_id'
 if not i1ii :
  IIi = "" . join ( [ "When " + I1IiiIi + " Then '" + iii1IiI + "'" for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] )
  oOoO0O00000 = sqlite3 . connect ( i11i )
  IIiIii1IiI1i = oOoO0O00000 . cursor ( )
  IIiIii1IiI1i . execute (
 "select alfa, count (alfa) from (select CASE " + IIi + " WHEN " + IIi1Ii1i111i + " THEN upper(substr(nombre, 1, 1)) ELSE '!0-9..'  END alfa, nombre, " + type + "_id from " + type + "s where active > 0 ) group by alfa order by alfa" )
  Ii111I = IIiIii1IiI1i . fetchall ( )
  oOoO0O00000 . close ( )
  i1Ii11i = [ ]
  for III1I1iI1I1iI in Ii111I :
   i1ii = III1I1iI1I1iI [ 0 ]
   iiiO000Oo = III1I1iI1I1iI [ 1 ]
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , i1ii , iiiO000Oo )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = '' )
   I1Iiii = '{0}?action={1}sByAZ&letra={2}' . format ( I1iI11I , type , i1ii )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  try :
   if 4 - 4: II * IiII1IiI . oooOoO * I1
   OOo000Oo ( o0o0000O0 )
  except :
   pass
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  params [ 'sql_group' ] = ' group_id'
  params [ 'action' ] = type + 'sByAZ'
  params [ 'actionParams' ] = ''
  params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
  params [ 'anno' ] = 'true'
  params [ "puntos" ] = "true"
  params [ "letra" ] = i1ii
  params [ 'actionParams' ] = 'letra=' + i1ii
  if 'page' in params and 'c_page' in params :
   oo0 = int ( params [ 'c_page' ] )
   params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
   params [ "c_page" ] = oo0
   oOoO0O00000 = sqlite3 . connect ( i11i )
   IIiIii1IiI1i = oOoO0O00000 . cursor ( )
   if i1ii in I1ii1iiiI :
    I1ii1iiiI [ i1ii ] = I1ii1iiiI [ i1ii ] + ' OR'
   elif i1ii == ooOOooOO00O :
    I1ii1iiiI [ i1ii ] = "AND" . join ( [ " NOT ( " + I1IiiIi + ") " for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] ) + " AND NOT (" + IIi1Ii1i111i + ") OR"
   else :
    I1ii1iiiI [ i1ii ] = ''
   O0o0oooo00 = ''
   if type == 'peli' :
    oOoo = iiI1111IIiiI
    O0o0oooo00 = ' group by group_id'
    if 89 - 89: IIoooO0ooO0oo + i1iI1 . IiII1IiI
    if 45 - 45: OOO
   IIiIii1IiI1i . execute (
 "select " + "," . join ( oOoo ) + " from " + type + "s where active > 0 AND ( " + I1ii1iiiI [
 i1ii ] + " upper(substr(nombre, 1, 1)) == ?) and category not in ('Documental', 'Musica') and " + params [ 'sql_cond' ] + " " + O0o0oooo00 + " order by nombre limit " + str ( ooo0ooOoO0Oo ) ,
 ( i1ii , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
   oOoO0O00000 . close ( )
   if type == 'peli' :
    OooO00OOo0OOO ( Ii111I , type = 'pelis' , info = params )
   else :
    params [ 'actionParams' ] = 'alfa >' + i1ii
    I1IiIiI ( Ii111I , True , True , False )
  else :
   oo0 = 1
   params [ "c_page" ] = oo0
   oOoO0O00000 = sqlite3 . connect ( i11i )
   IIiIii1IiI1i = oOoO0O00000 . cursor ( )
   if i1ii in I1ii1iiiI :
    I1ii1iiiI [ i1ii ] = I1ii1iiiI [ i1ii ] + ' OR'
   elif i1ii == ooOOooOO00O :
    I1ii1iiiI [ i1ii ] = "AND" . join ( [ " NOT ( " + I1IiiIi + ") " for iii1IiI , I1IiiIi in I1ii1iiiI . iteritems ( ) ] ) + " AND NOT (" + IIi1Ii1i111i + ") OR"
   else :
    I1ii1iiiI [ i1ii ] = ''
   O0o0oooo00 = ''
   if type == 'peli' :
    oOoo = iiI1111IIiiI
    O0o0oooo00 = ' group by group_id'
    if 28 - 28: IiII1IiI + I1 % ii1I1ii1IiIi1
   IIiIii1IiI1i . execute (
 "select " + "," . join ( oOoo ) + " from " + type + "s where active > 0 and category not in ('Documental', 'Musica') AND ( " + I1ii1iiiI [
 i1ii ] + " upper(substr(nombre, 1, 1)) == ?) " + O0o0oooo00 + " order by nombre limit " + str ( ooo0ooOoO0Oo ) ,
 ( i1ii , ) )
   Ii111I = IIiIii1IiI1i . fetchall ( )
   oOoO0O00000 . close ( )
   if type == 'peli' :
    OooO00OOo0OOO ( Ii111I , type = 'pelis' , info = params )
   else :
    if 25 - 25: IIII . Ii1I % o00oO0oo0O0O0 / o00oO0oo0O0O0 . IIII
    I1IiIiI ( Ii111I , True , True , False , params )
    if 88 - 88: OOO / II / ii1I1ii1IiIi1 - Ii1I / I1
    if 1 - 1: OOoOoO0o0o0OO . IiII1i1I * iiIIi1i1Iii + i1iI1
def I1I1i1i11I1i ( option ) :
 I1IIiI11III = [ ]
 if "Series" == option :
  I1IIiI11III . append ( { 'title' : 'Series Favoritas' , oOOO0O0 : 'listfavs' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series' , oOOO0O0 : Iii1 , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Series Anime' , oOOO0O0 : 'series_anime' , 'ico' : 'series_anime' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Series Dibujos' , oOOO0O0 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Retro' , oOOO0O0 : 'series_retro' , 'ico' : 'series_retro' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Telenovelas' , oOOO0O0 : 'telenovelas' , 'ico' : 'telenovelas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series A-Z' , oOOO0O0 : 'seriesByAZ' , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Otros Idiomas' , oOOO0O0 : 'seriesByLang' , 'ico' : 'series_otros_idiomas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Recientes' , oOOO0O0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas' , oOOO0O0 : 'series_mas_vistas' , 'ico' : 'series_mas_vistas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Mas Vistas Último Mes' , oOOO0O0 : 'series_mas_vistas_mes' , 'ico' : 'series_mas_vistas_mes' , 'fan' : 'fanart_series' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Serie' , oOOO0O0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 elif "Pelis" == option :
  I1IIiI11III . append ( { 'title' : 'Pelis Favoritas' , oOOO0O0 : 'listfavp' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis A-Z' , oOOO0O0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis (Genero)' , oOOO0O0 : 'list_generos' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis (Año)' , oOOO0O0 : 'anyo' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis Otros Idiomas' , oOOO0O0 : 'pelisByLang' , 'ico' : 'pelis_otros_idiomas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Sagas' , oOOO0O0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Top Pelis (Año)' , oOOO0O0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis Recientes' , oOOO0O0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis Recientes (Año)' , oOOO0O0 : 'ultimas_pelis_anyo' , 'ico' : 'pelis_recientes_anyo' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas' , oOOO0O0 : 'pelis_mas_vistas' , 'ico' : 'pelis_mas_vistas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Más Vistas Último Mes' , oOOO0O0 : 'pelis_mas_vistas_mes' , 'ico' : 'pelis_mas_vistas_mes' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Peli' , oOOO0O0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 elif "Dibujos" == option :
  I1IIiI11III . append ( { 'title' : 'Dibujos Favoritos' , oOOO0O0 : 'listfavd' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Series Dibujos' , oOOO0O0 : 'series_dibujos' , 'ico' : 'series_dibujos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis Dibujos' , oOOO0O0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Especial Disney' , oOOO0O0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( 'Especial Disney' ) , 'ico' : 'https://i.imgur.com/D1Mcw4Q.png' ,
 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Top Pelis Dibujos' , oOOO0O0 : 'top_peli_inf' , 'ico' : 'top_pelis_dibujos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis Dibujos Recientes' , oOOO0O0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Más Vistas' , oOOO0O0 : 'pelis_dibujos_mas_vistas' , 'ico' : 'pelis_dibus_mas_vistas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Más Vistas Último Mes' , oOOO0O0 : 'pelis_dibujos_mas_vistas_mes' , 'ico' : 'pelis_dibus_mas_vistas_ultimo_mes' ,
 'fan' : 'fanart_palantir' } )
 elif "Herramientas" == option :
  I1IIiI11III . append ( { 'title' : 'Limpiar Temporales' , oOOO0O0 : 'clean' , 'ico' : 'limpiar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Crear Copia Favoritos' , oOOO0O0 : 'createCopy' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Restaurar Favoritos' , oOOO0O0 : 'restoreCopy' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Abrir Ajustes' , oOOO0O0 : 'openSettings' , 'ico' : 'ajustes' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Extended Info' , oOOO0O0 : 'install' , 'options' : '&options=script.extendedinfo' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar resolveurl' , oOOO0O0 : 'install' , 'options' : '&options=script.module.resolveurl' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Simple Downloader' , oOOO0O0 : 'install' , 'options' : '&options=script.module.simple.downloader' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Add To Lib' , oOOO0O0 : 'install' , 'options' : '&options=context.addtolib' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Common Plugin Cache' , oOOO0O0 : 'install' , 'options' : '&options=script.common.plugin.cache' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Instalar Plugin YouTube' , oOOO0O0 : 'install' , 'options' : '&options=plugin.video.youtube' , 'ico' : 'instalar' , 'fan' : 'fanart_palantir' } )
 elif "Anime" == option :
  I1IIiI11III . append (
 { 'title' : 'Pelis Anime' , oOOO0O0 : 'peli_anime' , 'ico' : 'pelis_anime' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Series Anime' , oOOO0O0 : 'series_anime' , 'ico' : 'series_anime_menu' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Recientes' , oOOO0O0 : 'ultimas_series_anime' , 'ico' : 'series_recientes_anime' , 'fan' : 'fanart_palantir' } )
 elif "Documental" == option :
  I1IIiI11III . append (
 { 'title' : 'Documentales A/Z' , oOOO0O0 : 'series_documentales' , 'ico' : 'documentalesaz' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Documentales Recientes' , oOOO0O0 : 'ultimos_documentales' , 'ico' : 'documentales_recientes' , 'fan' : 'fanart_palantir' } )
 elif "Musica" == option :
  I1IIiI11III . append ( { 'title' : 'Musica A/Z' , oOOO0O0 : 'series_musica' , 'ico' : 'musicaaz' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Musica Reciente' , oOOO0O0 : 'ultimas_musicas' , 'ico' : 'musica_reciente' ,
 'fan' : 'fanart_palantir' } )
  if 67 - 67: I1IiI1III11i
 else :
  I1IIiI11III . append ( { 'title' : 'Favoritos' , oOOO0O0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
  O00o00O000O ( I1IIiI11III )
  I1IIiI11III . append ( { 'title' : 'Menu Series' , oOOO0O0 : 'series_menu' , 'ico' : 'menu_serie' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Menu Pelis' , oOOO0O0 : 'pelis_menu' , 'ico' : 'menu_peli' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Menu Dibujos' , oOOO0O0 : 'dibujos_menu' , 'ico' : 'menu_dibujos' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Menu Anime' , oOOO0O0 : 'anime_menu' , 'ico' : 'menu_anime' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Menu Musica' , oOOO0O0 : 'musica_menu' , 'ico' : 'menu_musica' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Menu Documentales' , oOOO0O0 : 'documentales_menu' , 'ico' : 'menu_documentales' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Series Recientes' , oOOO0O0 : 'ultimas_series' , 'ico' : 'series_recientes' ,
 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis Recientes' , oOOO0O0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append (
 { 'title' : 'Pelis Recientes (Año)' , oOOO0O0 : 'ultimas_pelis_anyo' , 'ico' : 'pelis_recientes_anyo' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Pelis Dibujos Recientes' , oOOO0O0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' ,
 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Peli' , oOOO0O0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  I1IIiI11III . append ( { 'title' : 'Buscar Serie' , oOOO0O0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
  if 94 - 94: ooOooO0OOO
  if 97 - 97: IIoooO0ooO0oo - Ii1I % I1IiI1III11i + oo
  I1IIiI11III . append ( { 'title' : 'Herramientas' , oOOO0O0 : 'herramientas_menu' , 'ico' : 'herramientas' , 'fan' : 'fanart_palantir' } )
 return I1IIiI11III
 if 55 - 55: iiIIi1i1Iii . IIII / oo0o . i1iI1 * IIoooO0ooO0oo
 if 56 - 56: o00oO0oo0O0O0 + IiII1IiI . ooOooO0OOO
 if 78 - 78: iiIIi1i1Iii / OOO - IIoooO0ooO0oo / IIII / i1iI1 / oOO
def ooi11iiIii ( ) :
 I1IIiI11III = [ ]
 I1IIiI11III . append ( { 'title' : 'Series' , oOOO0O0 : Iii1 , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series A-Z' , oOOO0O0 : 'seriesByAZ' , 'ico' : Iii1 , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Infantiles' , oOOO0O0 : 'series_dibujos' , 'ico' : 'dibujos' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Retro' , oOOO0O0 : 'series_retro' , 'ico' : 'retro' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Favoritos' , oOOO0O0 : 'listfav' , 'ico' : 'favoritos' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis A-Z' , oOOO0O0 : 'pelisByAZ' , 'ico' : 'pelis' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis (Genero)' , oOOO0O0 : 'list_generos' , 'ico' : 'pelis_genero' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis (Año)' , oOOO0O0 : 'anyo' , 'ico' : 'pelis_anyo' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Dibujos' , oOOO0O0 : 'peli_inf' , 'ico' : 'pelis_dibujos' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Top Pelis (Año)' , oOOO0O0 : 'anyo_top' , 'ico' : 'top_pelis' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Top Pelis Dibujos' , oOOO0O0 : 'top_peli_inf' , 'ico' : 'top_dibujos' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Dibujos Recientes' , oOOO0O0 : 'last_peli_inf' , 'ico' : 'dibujos_recientes' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Pelis Recientes' , oOOO0O0 : 'ultimas_pelis' , 'ico' : 'pelis_recientes' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Series Recientes' , oOOO0O0 : 'ultimas_series' , 'ico' : 'series_recientes' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Sagas' , oOOO0O0 : 'sagas' , 'ico' : 'sagas' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Buscar Peli' , oOOO0O0 : 'searchPeli' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 I1IIiI11III . append ( { 'title' : 'Buscar Serie' , oOOO0O0 : 'searchSerie' , 'ico' : 'buscar' , 'fan' : 'fanart_palantir' } )
 if 4 - 4: OOoOoO0o0o0OO - oo0o - i1iI1 - Ii1I % IIoooO0ooO0oo
 if 38 - 38: o00oO0oo0O0O0 % IIoooO0ooO0oo . II . oooOoO - i1iI1 / o00oO0oo0O0O0
 return I1IIiI11III
 if 68 - 68: oooOoO
 if 50 - 50: o00oO0oo0O0O0 - II . OOO / I1
def iIi1iiIiIi ( function_menu ) :
 if 25 - 25: i1iI1 * IIII * I1 % IiII1i1I
 I1IIiI11III = function_menu
 i1Ii11i = [ ]
 for IIIIi11i in I1IIiI11III :
  if IIIIi11i [ 'ico' ] . lower ( ) . startswith ( 'http' ) :
   I1IiI1111111 = IIIIi11i [ 'ico' ]
  else :
   I1IiI1111111 = '%s/%s.png' % ( iii11i1IIi , IIIIi11i [ 'ico' ] )
  OoOO0OO0o0O = O000000O0OoOo ( nombre = '[COLOR %s][B]%s[/B][/COLOR]' % ( i1IiI1iii , IIIIi11i [ 'title' ] ) , caratula = I1IiI1111111 ,
 poster = '%s/%s.jpg' % ( iii11i1IIi , IIIIi11i [ 'fan' ] ) )
  if 'options' in IIIIi11i :
   I1Iiii = '{0}?{1}={2}{3}' . format ( I1iI11I , oOOO0O0 , IIIIi11i [ oOOO0O0 ] , IIIIi11i [ 'options' ] )
  else :
   I1Iiii = '{0}?{1}={2}' . format ( I1iI11I , oOOO0O0 , IIIIi11i [ oOOO0O0 ] )
  iIi1Ii = True
  if 'isSaga' in IIIIi11i and IIIIi11i [ 'isSaga' ] == 'true' :
   OoOO0OO0o0O . addContextMenuItems ( II1Ii11i1Ii1I ( base64 . urlsafe_b64encode ( IIIIi11i [ 'title' ] ) ) )
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  if 49 - 49: IIII . oo % IIII % OOoOoO0o0o0OO % OOO . II
  OOo000Oo ( O0O000000Oo )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 95 - 95: II / i1iI1 % Ii1I
def OOo000Oo ( view ) :
 if xbmc . translatePath ( __settings__ . getSetting ( 'EnableView' ) ) == 'true' and view != 'none' :
  if 48 - 48: o00oO0oo0O0O0 % ii1I1ii1IiIi1 * I1IiI1III11i % I1 + oooOoO + II
  if 38 - 38: ii1I1ii1IiIi1
  if 83 - 83: Ii1I
  if 48 - 48: iiIIi1i1Iii
  if 34 - 34: iiIIi1i1Iii . oo % ooOooO0OOO
  if 9 - 9: I1IiI1III11i % I1IiI1III11i + oOO + oOO
  if 36 - 36: iiIIi1i1Iii * i1iI1
  if 52 - 52: IIoooO0ooO0oo / IIoooO0ooO0oo
  if 67 - 67: ii1I1ii1IiIi1
  xbmc . executebuiltin ( "Container.SetViewMode(%s)" % str ( view ) )
  if 100 - 100: Ii1I * i1iI1 % ii1I1ii1IiIi1 / IIoooO0ooO0oo * I1IiI1III11i . OOO
def O00o00O000O ( categories ) :
 Ii11i1iIiII11 = xbmc . translatePath ( __settings__ . getSetting ( 'favSaga' ) )
 if Ii11i1iIiII11 != '' and Ii11i1iIiII11 != 'false' :
  if 36 - 36: oo / oo - OOoOoO0o0o0OO - I1
  ooo = xbmcgui . ListItem ( label = base64 . urlsafe_b64decode ( Ii11i1iIiII11 ) , iconImage = 'https://i.imgur.com/JNS6A8M.png' )
  categories . append (
 { 'title' : base64 . urlsafe_b64decode ( Ii11i1iIiII11 ) , oOOO0O0 : 'saga_detail&saga=%s' % Ii11i1iIiII11 ,
 'ico' : 'https://i.imgur.com/JNS6A8M.png' , 'fan' : 'fanart_palantir' , 'isSaga' : 'true' } )
  if 29 - 29: i1iI1
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select especial from version" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if Ii111I [ 0 ] is not None and Ii111I [ 0 ] [ 0 ] is not None :
  OOo00OO0oo = Ii111I [ 0 ] [ 0 ] . split ( '#' )
  I1iII1II1iII = 0
  for iii1IiI in xrange ( 0 , len ( OOo00OO0oo ) / 2 ) :
   if 100 - 100: OOoOoO0o0o0OO . o00oO0oo0O0O0
   if 41 - 41: iiIIi1i1Iii . Ii - oo / oo * Ii
   categories . append ( { 'title' : OOo00OO0oo [ iii1IiI * 2 ] , oOOO0O0 : 'saga_detail&saga=%s' % base64 . urlsafe_b64encode ( OOo00OO0oo [ iii1IiI * 2 ] ) , 'ico' : OOo00OO0oo [ ( iii1IiI * 2 ) + 1 ] , 'fan' : 'fanart_palantir' } )
   if 77 - 77: OOoOoO0o0o0OO
def ooo0O000oOo0 ( params ) :
 if 72 - 72: iiIIi1i1Iii % o00oO0oo0O0O0 * oo + IIoooO0ooO0oo / II
 iI1iiIi1ii1 = xbmc . getCondVisibility ( 'System.HasAddon(%s)' % params [ 'options' ] )
 if iI1iiIi1ii1 :
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , 'El addon ya estaba instalado' , xbmcgui . NOTIFICATION_INFO , 5000 )
 else :
  if 95 - 95: OOoOoO0o0o0OO . oo0o
  if 60 - 60: oo0o * IiII1IiI + ooOooO0OOO % ooOooO0OOO
  if 93 - 93: II % oo0o - I1IiI1III11i / ooOooO0OOO / oOO
  xbmc . executebuiltin ( 'xbmc.installaddon(%s)' % params [ 'options' ] , True )
  if 83 - 83: I1
  if 46 - 46: IIoooO0ooO0oo - IIII + OOO % i1iI1
  if 11 - 11: II + oo0o
def O0OOoOo ( params ) :
 params [ 'sql_cond' ] = 'active > 0  and group_id = ' + params [ 'groupId' ]
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb"
 ] , [ ] , [ ] , [ 'tags asc' ] , params )
 xbmcplugin . setContent ( iiIIiiII1 , "movies" )
 OOo000Oo ( OO0O0 )
 if len ( Ii111I ) > 0 :
  i1Ii11i = [ ]
  for III1I1iI1I1iI in Ii111I :
   Oo00o0O0oOo0 = [ ]
   oOoo00o000oo = III1I1iI1I1iI [ 8 ]
   if isinstance ( oOoo00o000oo , unicode ) :
    oOoo00o000oo = oOoo00o000oo . encode ( 'utf-8' )
   I1IiI1111111 = III1I1iI1I1iI [ 11 ]
   Ii11I11Ii11I = III1I1iI1I1iI [ 12 ]
   iIII11111 = ithil . I1i1 ( III1I1iI1I1iI [ 6 ] )
   if iIII11111 == 'drive' or iIII11111 == 'Drive' or iIII11111 == 'uptobox' or iIII11111 == 'Uptobox' :
    iIII11111 = 'Team'
   if iIII11111 == 'uptostream' or iIII11111 == 'Uptostream' or iIII11111 == 'archive' or iIII11111 == 'Archive' :
    iIII11111 = '[COLOR gold][B]Top[/B][/COLOR]'
   ooo0o00Oo0o0 = '[COLOR %s]Servidor: %s [/COLOR]' % ( I111i11I1I , iIII11111 )
   if III1I1iI1I1iI [ 3 ] :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + '[COLOR %s] (%s) [/COLOR]' % ( iii1II , str ( III1I1iI1I1iI [ 3 ] . replace ( '#' , ' ' ) ) )
   if not I1IiI1111111 :
    I1IiI1111111 = None
   if not Ii11I11Ii11I :
    Ii11I11Ii11I = None
   if III1I1iI1I1iI [ 1 ] != 'ES' :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + ' [COLOR %s](%s)[/COLOR] ' % ( o0O0oO0 , str ( III1I1iI1I1iI [ 1 ] . replace ( '#' , ' ' ) ) )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = ooo0o00Oo0o0 , caratula = I1IiI1111111 ,
 poster = Ii11I11Ii11I , video = { 'title' : oOoo00o000oo , 'year' : III1I1iI1I1iI [ 9 ] , 'plot' : III1I1iI1I1iI [ 10 ] } , isPlayable = True )
   if 38 - 38: i1iI1 + II
   I1Iiii = '{0}?action={1}&id={2}&lin={3}&tit={4}&type={5}' . format ( I1iI11I , 'play' , III1I1iI1I1iI [ 0 ] , III1I1iI1I1iI [ 6 ] ,
 base64 . urlsafe_b64encode (
 unicode ( oOoo00o000oo , oooOOO ) . encode (
 oooOOO ) ) , 'pelis' )
   if len ( III1I1iI1I1iI ) > 16 and III1I1iI1I1iI [ 16 ] == 2 and __settings__ . getSetting ( 'activeDownload' ) :
    Oo00o0O0oOo0 . append (
 IiIIiI ( id = '%s-%s-%s' % ( str ( III1I1iI1I1iI [ 0 ] ) , str ( III1I1iI1I1iI [ 1 ] ) , III1I1iI1I1iI [ 2 ] ) , type = 'pelis' ,
 nombre = oOoo00o000oo ,
 url = III1I1iI1I1iI [ 6 ] ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = False ) )
   OoOO0OO0o0O . addContextMenuItems ( Oo00o0O0oOo0 )
   if 84 - 84: II - Ii1I
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , False ) )
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
  if 58 - 58: ii1I1ii1IiIi1 * IIII / OOO
def Ii11iII1i ( actionValue , row , url , path ) :
 i1I1I11111 = None
 oOooOoO00Oo = { }
 if 26 - 26: OOO - OOO + I1IiI1III11i
 try :
  iIii11iiiiI1 , o00o000o0ooOO = anor . I1i1I1iI11I (
 'select files.idFile, idPath, strFilename, playCount, iVideoWidth||"x"||iVideoHeight,iStreamType from files left join streamdetails on streamdetails.idFile = files.idFile where idPath=(Select idPath from path where strPath="plugin://plugin.video.palantir/") and strFilename like "plugin://plugin.video.palantir/?action=%s&%s"' % (
 actionValue , path ) )
  for o0oOo00O0OoO in o00o000o0ooOO :
   if 1 - 1: oooOoO
   oOooOoO00Oo [ o0oOo00O0OoO [ 2 ] ] = o0oOo00O0OoO
 except :
  pass
  if 94 - 94: oo % Ii1I / oo * IIII + ooOooO0OOO
 if actionValue == IiIIi1I1Ii or actionValue == 'list_temp' or actionValue == 'view_temp' :
  if url in oOooOoO00Oo :
   if oOooOoO00Oo [ url ] [ 3 ] > 0 :
    i1I1I11111 = Iiooo ( oOooOoO00Oo [ url ] [ 0 ] , oOooOoO00Oo [ url ] [ 1 ] , oOooOoO00Oo [ url ] [ 2 ] , False )
   else :
    i1I1I11111 = Iiooo ( oOooOoO00Oo [ url ] [ 0 ] , oOooOoO00Oo [ url ] [ 1 ] , oOooOoO00Oo [ url ] [ 2 ] , True )
    if 60 - 60: i1iI1 + Ii
    if 79 - 79: IIII / II % I1IiI1III11i - I1IiI1III11i
    if 32 - 32: oOO
    if 16 - 16: IiII1i1I % oooOoO * oOO + ooOooO0OOO
  else :
   if 32 - 32: oo . oOO * o00oO0oo0O0O0 + IiII1IiI / oooOoO . Ii
   i1I1I11111 = Iiooo ( 0 , OOo0oo , url , True )
 return i1I1I11111
 if 82 - 82: IIII + Ii / oo0o
 if 98 - 98: o00oO0oo0O0O0 . ooOooO0OOO % OOoOoO0o0o0OO % Ii1I + Ii % oOO
def OooO00OOo0OOO ( rows = [ ] , type = Iii1 , carat = None , poste = None , info = { } ) :
 try :
  if type == Iii1 :
   xbmcplugin . setContent ( iiIIiiII1 , "episodes" )
   OOo000Oo ( ii1i1ii1I )
  else :
   xbmcplugin . setContent ( iiIIiiII1 , "movies" )
   OOo000Oo ( OO0O0 )
 except :
  pass
  if 92 - 92: Ii / oo0o
 oOooOoO00Oo = { }
 if 38 - 38: Ii1I * oo + oOO
 if 72 - 72: o00oO0oo0O0O0 + oooOoO
 if 18 - 18: I1IiI1III11i / OOO
 if 32 - 32: I1 % oo % o00oO0oo0O0O0
 if 4 - 4: i1iI1 - i1iI1
 if 1 - 1: I1IiI1III11i - II * oOO + II % OOoOoO0o0o0OO
 if 43 - 43: OOoOoO0o0o0OO . o00oO0oo0O0O0 % Ii / Ii1I / o00oO0oo0O0O0
 if 66 - 66: oooOoO
 if 66 - 66: i1iI1 . OOO - I1IiI1III11i
 I1i111I = { }
 i1Ii11i = [ ]
 iI11iIIIi = ''
 if len ( rows ) > 0 :
  for III1I1iI1I1iI in rows :
   if 24 - 24: Ii1I
   Oo00o0O0oOo0 = [ ]
   oo0oo = len ( III1I1iI1I1iI )
   Iiii = III1I1iI1I1iI [ 0 ]
   I1OO = III1I1iI1I1iI [ 1 ]
   iiiI = III1I1iI1I1iI [ 2 ]
   OOooo0Oo = III1I1iI1I1iI [ 6 ]
   if 37 - 37: I1IiI1III11i % ooOooO0OOO - IIoooO0ooO0oo * IiII1IiI . iiIIi1i1Iii % oo
   if 73 - 73: ooOooO0OOO * IiII1IiI + IIII * iiIIi1i1Iii % oOO
   if 33 - 33: OOoOoO0o0o0OO
   if 79 - 79: I1IiI1III11i - Ii1I
   ooo0o00Oo0o0 = III1I1iI1I1iI [ 8 ]
   IIiI11Ii = III1I1iI1I1iI [ 9 ]
   I1I1iiII1 = III1I1iI1I1iI [ 10 ]
   I1IiI1111111 = III1I1iI1I1iI [ 11 ]
   Ii11I11Ii11I = III1I1iI1I1iI [ 12 ]
   if ooo0o00Oo0o0 :
    oOoo00o000oo = ooo0o00Oo0o0
    if type == 'series' :
     ooo0o00Oo0o0 = '[COLOR %s] %s[/COLOR]' % ( O00O000 , ooo0o00Oo0o0 )
    else :
     ooo0o00Oo0o0 = '[COLOR %s] %s[/COLOR]' % ( O0OOO , ooo0o00Oo0o0 )
   else :
    oOoo00o000oo = str ( I1OO ) + 'x' + iiiI
    ooo0o00Oo0o0 = str ( I1OO ) + 'x' + iiiI
   iI11iIIIi = oOoo00o000oo
   if 60 - 60: I1 * oooOoO + IIoooO0ooO0oo
   if oo0oo >= 21 :
    iI1ii1 = III1I1iI1I1iI [ 20 ]
    if 73 - 73: Ii
   else :
    iI1ii1 = III1I1iI1I1iI [ 3 ]
    if 5 - 5: I1IiI1III11i . i1iI1 + OOO % I1 . I1IiI1III11i - ii1I1ii1IiIi1
   if iI1ii1 and iI1ii1 != 'None' :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + '[COLOR %s] (%s) [/COLOR]' % ( iii1II , str ( " " . join ( set ( iI1ii1 . split ( '#' ) ) ) ) )
   if info and 'puntos' in info and III1I1iI1I1iI [ 14 ] :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + ' [%s] ' % str ( III1I1iI1I1iI [ 14 ] )
   if info and 'anno' in info and IIiI11Ii :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + ' (%s) ' % str ( IIiI11Ii )
    if 13 - 13: II + oo0o - oo0o
   if oo0oo >= 22 and type == 'pelis' :
    if 46 - 46: I1IiI1III11i
    o0oOo0O0O0O = set ( III1I1iI1I1iI [ 21 ] . split ( '#' ) )
    if 85 - 85: IiII1i1I / I1IiI1III11i . I1 * oOO + i1iI1
    if ( 'ES' not in o0oOo0O0O0O and len ( o0oOo0O0O0O ) == 1 ) or len ( o0oOo0O0O0O ) >= 2 :
     ooo0o00Oo0o0 = ooo0o00Oo0o0 + ' [COLOR %s](%s)[/COLOR] ' % ( o0O0oO0 , str ( " " . join ( o0oOo0O0O0O ) ) )
   if info and 'date' in info :
    ooo0o00Oo0o0 = ooo0o00Oo0o0 + ' (%s) ' % str ( III1I1iI1I1iI [ 13 ] )
   if not I1IiI1111111 :
    I1IiI1111111 = carat
   if not Ii11I11Ii11I :
    Ii11I11Ii11I = poste
   OoOO0OO0o0O = O000000O0OoOo ( nombre = ooo0o00Oo0o0 , caratula = I1IiI1111111 ,
 poster = Ii11I11Ii11I , video = { 'title' : ooo0o00Oo0o0 , 'year' : IIiI11Ii , 'plot' : I1I1iiII1 } , isPlayable = True )
   if 15 - 15: iiIIi1i1Iii
   if isinstance ( oOoo00o000oo , unicode ) :
    oOoo00o000oo = oOoo00o000oo . encode ( 'utf-8' )
    if 53 - 53: OOoOoO0o0o0OO
   III1i = type
   if 4 - 4: I1IiI1III11i . o00oO0oo0O0O0 . Ii1I / oo0o - I1IiI1III11i * IIoooO0ooO0oo
   OooOO0000oOoO = 'play'
   if 97 - 97: oOO
   if oo0oo > 20 and III1I1iI1I1iI [ 19 ] > 1 :
    OooOO0000oOoO = IiIIi1I1Ii
    if 52 - 52: i1iI1 * IiII1IiI + IIoooO0ooO0oo % ii1I1ii1IiIi1
    if III1I1iI1I1iI [ 18 ] :
     III1i = III1i + '&groupId=' + str ( III1I1iI1I1iI [ 18 ] )
     if 47 - 47: OOoOoO0o0o0OO * iiIIi1i1Iii / ooOooO0OOO % oooOoO / IiII1IiI / IiII1IiI
   I1Iiii = '{0}?action={1}&id={2}&lin={3}&tit={4}&type={5}' . format ( I1iI11I , OooOO0000oOoO , Iiii , OOooo0Oo ,
 base64 . urlsafe_b64encode (
 unicode ( oOoo00o000oo , oooOOO ) . encode (
 oooOOO ) ) , III1i )
   if 73 - 73: iiIIi1i1Iii / IIII / IiII1i1I - II / II
   if type == 'pelis' and xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 17 ] and III1I1iI1I1iI [ 17 ] . startswith ( 'https://www.themoviedb.org' ) :
    Oo00o0O0oOo0 . append ( ( "ExtendedInfo" , "XBMC.RunScript(script.extendedinfo,info=extendedinfo,id=%s,name=%s)" % ( str ( III1I1iI1I1iI [ 17 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , oOoo00o000oo ) ) )
    if 49 - 49: ooOooO0OOO + Ii - o00oO0oo0O0O0 . IiII1IiI - IiII1i1I . oOO
   i1I1Ii = Ii11iII1i ( OooOO0000oOoO , III1I1iI1I1iI , I1Iiii , 'id=' + str ( III1I1iI1I1iI [ 0 ] ) + '%' )
   if 15 - 15: IIII + ooOooO0OOO
   if i1I1Ii :
    Oo00o0O0oOo0 . append ( i1I1Ii )
    if 73 - 73: oo0o * o00oO0oo0O0O0 * Ii1I * oo0o . i1iI1 - oooOoO
   Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( Iiii ) , str ( I1OO ) , iiiI ) , type = type , nombre = ooo0o00Oo0o0 ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = i11iii , favLiteral = '' ) )
   if type == 'series' :
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( Iiii ) , str ( I1OO ) , iiiI ) , type = type , nombre = ooo0o00Oo0o0 , url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = i11 , text = 'Series' , favLiteral = 's' ) )
    if 94 - 94: iiIIi1i1Iii % IIII . I1IiI1III11i / Ii1I + OOoOoO0o0o0OO - II
    if 69 - 69: Ii . Ii - i1iI1
    if 73 - 73: IiII1IiI . oo0o - I1 / I1 % oo0o . IiII1i1I
    if 57 - 57: o00oO0oo0O0O0 * IIoooO0ooO0oo - I1IiI1III11i
    if 27 - 27: oo0o * IIII * oooOoO / I1 - ii1I1ii1IiIi1
    if 70 - 70: Ii * IiII1i1I * Ii1I + I1 % OOO . oo
   if len ( III1I1iI1I1iI ) > 15 and 'Dibujos' in III1I1iI1I1iI [ 15 ] :
    if 80 - 80: o00oO0oo0O0O0 / IIII
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( Iiii ) , str ( I1OO ) , iiiI ) , type = type , nombre = ooo0o00Oo0o0 ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    Oo00o0O0oOo0 . append (
 OO0o0O0 ( id = '%s-%s-%s' % ( str ( Iiii ) , str ( I1OO ) , iiiI ) , type = type , nombre = ooo0o00Oo0o0 ,
 url = I1Iiii ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , fav = IiiIi11iIII1 , text = 'Pelis' , favLiteral = 'p' ) )
    if 30 - 30: oooOoO - IIoooO0ooO0oo - o00oO0oo0O0O0 + oo0o / oo - I1
    if 27 - 27: IIII - II + oooOoO / II . ooOooO0OOO
   if III1I1iI1I1iI [ 16 ] == 2 and __settings__ . getSetting ( 'activeDownload' ) and OooOO0000oOoO != IiIIi1I1Ii :
    Oo00o0O0oOo0 . append (
 IiIIiI ( id = '%s-%s-%s' % ( str ( Iiii ) , str ( I1OO ) , iiiI ) , type = type , nombre = oOoo00o000oo ,
 url = OOooo0Oo ,
 caratula = I1IiI1111111 , poster = Ii11I11Ii11I , remove = False ) )
   OoOO0OO0o0O . addContextMenuItems ( Oo00o0O0oOo0 )
   if 30 - 30: i1iI1 % I1IiI1III11i
   if 99 - 99: o00oO0oo0O0O0 / OOO
   if 13 - 13: IiII1i1I . Ii1I / iiIIi1i1Iii
   if 31 - 31: II
   if 37 - 37: oOO . ii1I1ii1IiIi1 / IiII1IiI - ii1I1ii1IiIi1 * o00oO0oo0O0O0
   if OooOO0000oOoO == IiIIi1I1Ii :
    iIi1Ii = True
   else :
    iIi1Ii = False
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
   if 51 - 51: I1IiI1III11i - OOO + iiIIi1i1Iii
   if 20 - 20: IIII - o00oO0oo0O0O0 * oo - oooOoO
   if 4 - 4: oo % IIII * ii1I1ii1IiIi1 * oOO
   if 40 - 40: II + I1IiI1III11i % OOoOoO0o0o0OO - oooOoO
   if 56 - 56: oooOoO / o00oO0oo0O0O0
   if 70 - 70: IiII1IiI
   if 76 - 76: Ii1I % I1 % OOO . o00oO0oo0O0O0 . oo0o - I1IiI1III11i
   if 59 - 59: OOoOoO0o0o0OO % IiII1i1I * oo0o * I1IiI1III11i - IiII1IiI
   if 98 - 98: iiIIi1i1Iii + I1IiI1III11i / oooOoO
  if len ( rows ) >= ooo0ooOoO0Oo :
   if 'c_page' in info and 'action' in info and 'actionParams' in info :
    iII = int ( info [ 'c_page' ] )
    iII = iII + 1
    try :
     iI11iIIIi = iI11iIIIi . encode ( 'utf-8' , 'ignore' )
    except ( UnicodeEncodeError , UnicodeDecodeError ) :
     pass
    OoOO0OO0o0O = O000000O0OoOo ( nombre = 'Página Siguiente (%s) >' % str ( iII ) )
    I1Iiii = '{0}?{1}={2}&c_page={3}&page={4}&{5}' . format ( I1iI11I , oOOO0O0 , info [ 'action' ] , str ( iII ) ,
 base64 . urlsafe_b64encode (
 "nombre > '" + iI11iIIIi + "'" ) , info [ 'actionParams' ] )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
    if 86 - 86: oOO
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 57 - 57: IIII - oo0o * i1iI1 + iiIIi1i1Iii % IiII1i1I
 if 27 - 27: I1 + I1IiI1III11i . o00oO0oo0O0O0 - II
 if 23 - 23: II . iiIIi1i1Iii + ii1I1ii1IiIi1 / o00oO0oo0O0O0 + IIoooO0ooO0oo
def I1IiIiI ( rows , category = None , lang = None , date = None , params = { } ) :
 i1Ii11i = [ ]
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "tvshows" )
  OOo000Oo ( oO0O0o0ooO )
 except :
  pass
  if 72 - 72: IIII * IiII1IiI + OOoOoO0o0o0OO
  if 85 - 85: I1 . OOoOoO0o0o0OO
 for III1I1iI1I1iI in rows :
  IIiI1iII1iii = [ ]
  OoOoOoo0000o = III1I1iI1I1iI [ 0 ]
  iI11iIIIi = III1I1iI1I1iI [ 1 ]
  I11iiiI1IiI = III1I1iI1I1iI [ 2 ]
  OoO0Oo = ''
  O0OoOo0000Ooo = ''
  o0oo = ''
  if 50 - 50: Ii1I * oo0o % i1iI1 * oo0o
  if category and III1I1iI1I1iI [ 10 ] != 'General' and III1I1iI1I1iI [ 10 ] != 'Pelicula' :
   O0OoOo0000Ooo = '[COLOR %s](%s) [/COLOR]' % ( IIIi1111iI , III1I1iI1I1iI [ 10 ] . replace ( '#' , ', ' ) )
  if lang :
   o0oOo0O0O0O = set ( III1I1iI1I1iI [ 9 ] . split ( '#' ) )
   if ( 'ES' not in o0oOo0O0O0O and len ( o0oOo0O0O0O ) == 1 ) or len ( o0oOo0O0O0O ) >= 2 :
    OoO0Oo = '[COLOR %s](%s) [/COLOR]' % ( o0O0oO0 , III1I1iI1I1iI [ 9 ] . replace ( '#' , ' ' ) )
  if date :
   o0oo = '[COLOR %s](%s)[/COLOR]' % ( iiIIiiiI11 , str ( III1I1iI1I1iI [ 11 ] ) )
  if I11iiiI1IiI and III1I1iI1I1iI [ 8 ] == 'N' :
   oo0ooo0OOOOo = ithil . Ii1IIiI11iI1 ( I11iiiI1IiI )
   if oo0ooo0OOOOo == 'yt' :
    Ii1IiI = ithil . oO0Oo00 ( I11iiiI1IiI )
    for iii1IiI in xrange ( 0 , len ( Ii1IiI ) ) :
     if len ( Ii1IiI ) <= 1 :
      Ooo00O = ''
     else :
      Ooo00O = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , iI11iIIIi + Ooo00O , OoO0Oo , O0OoOo0000Ooo , o0oo )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
     if 61 - 61: Ii1I
     if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
      if 22 - 22: I1IiI1III11i . oo0o - ii1I1ii1IiIi1 . ii1I1ii1IiIi1 * IiII1i1I / o00oO0oo0O0O0
      IIiI1iII1iii . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , iI11iIIIi ) ) )
      if 67 - 67: o00oO0oo0O0O0
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = Ii1IiI [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
     if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
      IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] ,
 caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
     OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
     i1Ii11i . append ( ( Ii1IiI [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , iI11iIIIi , OoO0Oo , O0OoOo0000Ooo , o0oo )
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
    I1Iiii = '{0}?{1}=view_serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o )
    if 71 - 71: oOO . I1IiI1III11i + I1 * oo + ii1I1ii1IiIi1
    if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
     if 28 - 28: o00oO0oo0O0O0 % OOoOoO0o0o0OO . OOO . II - ii1I1ii1IiIi1 % oo0o
     IIiI1iII1iii . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , iI11iIIIi ) ) )
     if 38 - 38: OOoOoO0o0o0OO + OOO + IiII1i1I - oOO % oo - oooOoO
    IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
    if 22 - 22: IiII1IiI
    if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     IIiI1iII1iii . append (
 OO0o0O0 ( id = '%s-v' % str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , fav = i11 , text = 'Series' , favLiteral = 's' ) )
    OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
  else :
   iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR] %s %s %s' % ( i1IiI1iii , iI11iIIIi , OoO0Oo , O0OoOo0000Ooo , o0oo )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = III1I1iI1I1iI [ 6 ] ,
 poster = III1I1iI1I1iI [ 7 ] , video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : III1I1iI1I1iI [ 5 ] } )
   I1Iiii = '{0}?{1}=serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o )
   if 88 - 88: oo % Ii1I
   if xbmc . getCondVisibility ( 'System.HasAddon(script.extendedinfo)' ) and III1I1iI1I1iI [ 12 ] and III1I1iI1I1iI [ 12 ] . startswith ( 'https://www.themoviedb.org' ) :
    if 23 - 23: II / oooOoO
    IIiI1iII1iii . append ( ( "ExtendedInfo" ,
 "XBMC.RunScript(script.extendedinfo,info=extendedtvinfo,id=%s,name=%s)" % (
 str ( III1I1iI1I1iI [ 12 ] . split ( '/' ) [ - 1 ] . split ( '-' ) [ 0 ] ) , iI11iIIIi ) ) )
    if 72 - 72: OOoOoO0o0o0OO . i1iI1 % OOO + OOoOoO0o0o0OO / oo + oo
    if 21 - 21: OOO * Ii1I * OOO . IiII1i1I + ooOooO0OOO % IiII1i1I
   IIiI1iII1iii . append ( OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ) )
   if 'Dibujos' in III1I1iI1I1iI [ 10 ] :
    IIiI1iII1iii . append ( OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ,
 fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
   else :
    IIiI1iII1iii . append (
 OO0o0O0 ( id = str ( OoOoOoo0000o ) , type = 'series' , nombre = iI11iiIi1I1iI , url = I1Iiii , caratula = III1I1iI1I1iI [ 6 ] , poster = III1I1iI1I1iI [ 7 ] ,
 fav = i11 , text = 'Series' , favLiteral = 's' ) )
   OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
   if 83 - 83: IIII / II . I1IiI1III11i * i1iI1 - I1 - I1
 if len ( rows ) >= ooo0ooOoO0Oo :
  if 'c_page' in params and 'action' in params :
   if 92 - 92: I1IiI1III11i
   try :
    iI11iIIIi = iI11iIIIi . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iII = int ( params [ 'c_page' ] )
   iII = iII + 1
   OoOO0OO0o0O = O000000O0OoOo ( nombre = 'Página Siguiente (%s) >' % str ( iII ) )
   I1Iiii = '{0}?{1}={2}&c_page={3}&page={4}&{5}' . format ( I1iI11I , oOOO0O0 , params [ 'action' ] , str ( iII ) ,

   # ii1I1ii1IiIi1 + I1IiI1III11i
   base64 . urlsafe_b64encode (
 "nombre > '" + iI11iIIIi + "'" ) , params [ 'actionParams' ] )
   if 55 - 55: IIII * II + i1iI1 / IIII * I1
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 24 - 24: iiIIi1i1Iii % I1IiI1III11i * I1 . i1iI1 . o00oO0oo0O0O0
 if 73 - 73: IiII1i1I % I1 + Ii1I + I1 - IIoooO0ooO0oo
 if 15 - 15: Ii * OOO + oo0o % IIoooO0ooO0oo - iiIIi1i1Iii / oo0o
def O0O ( serie_id ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute (
 "SELECT series.serie_id, series_temp.temp_id, series_temp.link, series.nombre, series.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series_temp.has_episodes, series_temp.nombre, series.link, 'quality', 'quality', series.category , series_temp.active FROM series LEFT JOIN series_temp ON series.serie_id = series_temp.serie_id where series.serie_id=? ORDER BY series_temp.temp_id" ,
 ( serie_id , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 i1Ii11i = [ ]
 IIiI1iII1iii = [ ]
 o0OoOOO = False
 if len ( Ii111I ) > 0 :
  IIIIi11i = Ii111I [ 0 ] [ 16 ]
  if 73 - 73: I1 * IiII1i1I - ii1I1ii1IiIi1 + o00oO0oo0O0O0 / IIII + oo0o
  if Ii111I [ 0 ] [ 13 ] :
   oo0ooo0OOOOo = ithil . Ii1IIiI11iI1 ( Ii111I [ 0 ] [ 13 ] )
   if oo0ooo0OOOOo == 'yt' :
    Ii1IiI = ithil . oO0Oo00 ( Ii111I [ 0 ] [ 13 ] )
    for iii1IiI in xrange ( 0 , len ( Ii1IiI ) ) :
     if len ( Ii1IiI ) <= 1 :
      Ooo00O = ''
     else :
      Ooo00O = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]Lista de Capítulos %s [/COLOR]' % ( i1IiI1iii , Ooo00O )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii111I [ 0 ] [ 3 ] , 'year' : Ii111I [ 0 ] [ 4 ] , 'plot' : Ii111I [ 0 ] [ 5 ] } )
     if 82 - 82: oo0o % oOO * o00oO0oo0O0O0
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     if IIIIi11i == 'Dibujos' :
      IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     else :
      IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = Ii111I [ 0 ] [ 6 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ,
 poster = Ii111I [ 0 ] [ 7 ] ) )
     OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
     i1Ii11i . append ( ( Ii1IiI [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]Lista de Capítulos [/COLOR]' % i1IiI1iii
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = Ii111I [ 0 ] [ 6 ] ,
 poster = Ii111I [ 0 ] [ 7 ] ,
 video = { 'title' : Ii111I [ 0 ] [ 3 ] , 'year' : Ii111I [ 0 ] [ 4 ] ,
 'plot' : 'Todos los episodios de la serie' } )
    I1Iiii = '{0}?{1}=view_serie&serie_id={2}' . format ( I1iI11I , oOOO0O0 , serie_id )
    IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI , url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] ) )
    if IIIIi11i == 'Dibujos' :
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s-v' % str ( serie_id ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = Ii111I [ 0 ] [ 6 ] , poster = Ii111I [ 0 ] [ 7 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
    OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
    if 32 - 32: I1IiI1III11i / IiII1IiI / OOoOoO0o0o0OO . Ii1I - I1
    if 52 - 52: IIoooO0ooO0oo % IiII1IiI . I1 * IiII1IiI + oo0o
    if 83 - 83: Ii1I % OOoOoO0o0o0OO
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , True ) )
 for III1I1iI1I1iI in Ii111I :
  IIIIi11i = III1I1iI1I1iI [ 16 ]
  IIiI1iII1iii = [ ]
  o0OoOOO = False
  OoOoOoo0000o = III1I1iI1I1iI [ 0 ]
  I1IiI = III1I1iI1I1iI [ 1 ]
  if 94 - 94: oOO + ooOooO0OOO / IIoooO0ooO0oo / IIoooO0ooO0oo - i1iI1 . OOO
  if III1I1iI1I1iI [ 12 ] :
   iiIiiI = III1I1iI1I1iI [ 12 ]
  else :
   iiIiiI = '%s %s' % ( 'Temporada' , I1IiI )
  IIIi1i1i = OoOO00oo ( III1I1iI1I1iI [ 5 ] , III1I1iI1I1iI [ 6 ] , III1I1iI1I1iI [ 7 ] , III1I1iI1I1iI [ 8 ] , III1I1iI1I1iI [ 9 ] , III1I1iI1I1iI [ 10 ] )
  if III1I1iI1I1iI [ 2 ] and III1I1iI1I1iI [ 17 ] > 0 :
   iIi1Ii = True
   o0OoOOO = True
   oo0ooo0OOOOo = ithil . Ii1IIiI11iI1 ( III1I1iI1I1iI [ 2 ] )
   if oo0ooo0OOOOo == 'yt' :
    Ii1IiI = ithil . oO0Oo00 ( III1I1iI1I1iI [ 2 ] )
    for iii1IiI in xrange ( 0 , len ( Ii1IiI ) ) :
     if len ( Ii1IiI ) <= 1 :
      Ooo00O = ''
     else :
      Ooo00O = " (" + str ( iii1IiI + 1 ) + ")"
     iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , iiIiiI + Ooo00O )
     OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = IIIi1i1i [ 1 ] ,
 poster = IIIi1i1i [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : IIIi1i1i [ 0 ] } )
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] ) )
     if IIIIi11i == 'Dibujos' :
      IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] ,
 fav = ooIIII , text = 'Dibujos' , favLiteral = 'd' ) )
     else :
      IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = Ii1IiI [ iii1IiI ] , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] ,
 fav = i11 , text = 'Series' , favLiteral = 's' ) )
     OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
     i1Ii11i . append ( ( Ii1IiI [ iii1IiI ] , OoOO0OO0o0O , True ) )
   else :
    iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , iiIiiI )
    OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = IIIi1i1i [ 1 ] ,
 poster = IIIi1i1i [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : IIIi1i1i [ 0 ] } )
    I1Iiii = '{0}?{1}=view_temp&serie_id={2}&temp_id={3}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o , I1IiI )
    if 1 - 1: II
    IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] ) )
    if IIIIi11i == 'Dibujos' :
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] , fav = ooIIII ,
 text = 'Dibujos' , favLiteral = 'd' ) )
    else :
     IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s-v' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 ,
 nombre = iI11iiIi1I1iI ,
 url = I1Iiii , caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] , fav = i11 ,
 text = 'Series' , favLiteral = 's' ) )
     if 32 - 32: oo
     if 26 - 26: Ii + OOoOoO0o0o0OO . II * oo
     if 33 - 33: OOO / IiII1i1I + OOO - OOoOoO0o0o0OO
     if 74 - 74: oo * OOoOoO0o0o0OO / Ii1I * I1
    OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
    if 59 - 59: oooOoO * IIII
    if 62 - 62: o00oO0oo0O0O0 / OOO . iiIIi1i1Iii * IIII . Ii
    if 18 - 18: oo0o
    i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
  if III1I1iI1I1iI [ 11 ] == 'Y' :
   IIiI1iII1iii = [ ]
   iI11iiIi1I1iI = '[COLOR %s]%s [/COLOR]' % ( i1IiI1iii , iiIiiI )
   if III1I1iI1I1iI [ 2 ] :
    iI11iiIi1I1iI = '%s [COLOR %s](Alternativo)[/COLOR]' % ( iI11iiIi1I1iI , i11ii )
   OoOO0OO0o0O = O000000O0OoOo ( nombre = iI11iiIi1I1iI , caratula = IIIi1i1i [ 1 ] ,
 poster = IIIi1i1i [ 2 ] ,
 video = { 'title' : III1I1iI1I1iI [ 3 ] , 'year' : III1I1iI1I1iI [ 4 ] , 'plot' : IIIi1i1i [ 0 ] } )
   I1Iiii = '{0}?{1}=list_temp&serie_id={2}&temp_id={3}&caratula={4}&poster={5}' . format ( I1iI11I , oOOO0O0 , OoOoOoo0000o , I1IiI ,
 IIIi1i1i [ 1 ] , IIIi1i1i [ 2 ] )
   if 83 - 83: o00oO0oo0O0O0 / oooOoO
   IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 , nombre = iI11iiIi1I1iI , url = I1Iiii ,
 caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] ) )
   if IIIIi11i == 'Dibujos' :
    IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] , fav = ooIIII , text = 'Dibujos' ,
 favLiteral = 'd' ) )
   else :
    IIiI1iII1iii . append ( OO0o0O0 ( id = '%s%s' % ( str ( OoOoOoo0000o ) , str ( I1IiI ) ) , type = Iii1 , nombre = iI11iiIi1I1iI ,
 url = I1Iiii ,
 caratula = IIIi1i1i [ 1 ] , poster = IIIi1i1i [ 2 ] , fav = i11 , text = 'Series' ,
 favLiteral = 's' ) )
    if 83 - 83: Ii + ii1I1ii1IiIi1 * IIoooO0ooO0oo . I1 % IIoooO0ooO0oo
    if 61 - 61: Ii1I - Ii / OOoOoO0o0o0OO
    if 100 - 100: Ii1I % IiII1i1I
    if 77 - 77: ii1I1ii1IiIi1
    if 76 - 76: o00oO0oo0O0O0 % i1iI1 - oo0o
   OoOO0OO0o0O . addContextMenuItems ( IIiI1iII1iii )
   if 51 - 51: OOO / i1iI1
   if 40 - 40: oo * IIII * IiII1IiI
   if 11 - 11: oOO + oOO * IIII . i1iI1
   if 92 - 92: Ii1I * IiII1i1I - IiII1IiI
   iIi1Ii = True
   o0OoOOO = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "tvshows" )
  OOo000Oo ( oO0O0o0ooO )
 except :
  pass
 if o0OoOOO :
  xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
  xbmcplugin . endOfDirectory ( iiIIiiII1 )
 else :
  xbmc . log ( "[addon.Palantir-%s]: No info found for serie %s " % ( IiIi , serie_id ) )
  if 34 - 34: oo0o - IIoooO0ooO0oo - oOO / IIII
  if 18 - 18: I1 * IIII - ooOooO0OOO * IiII1i1I
  if 97 - 97: IiII1i1I
def ooO0 ( serie_id , temp_id , caratula , poster ) :
 Ii111I = O000o000o0Oo ( "capitulos" , [ "serie_id" , "temp_id" , "capitulo_id" , "''" , "''" , "''" , "link" , "'quality'" ,
 "nombre" , "anno" , "sinopsis" , "caratula" , "poster" , "updated" , "'Test'" , "'Test'" , "active" ] , [ "serie_id" , "temp_id" ] ,
 [ serie_id , temp_id ] , [ 'capitulos.nombre' , 'capitulos.capitulo_id' ] , params = { 'sql_cond' : ' active > 0' } )
 OooO00OOo0OOO ( Ii111I , Iii1 , caratula , poster )
 if 17 - 17: IIoooO0ooO0oo . IiII1i1I * II * I1
 if 83 - 83: oooOoO % I1IiI1III11i * I1IiI1III11i / IiII1i1I - ooOooO0OOO + ooOooO0OOO
 if 69 - 69: I1 * I1
def Oo0o ( serie_id , temp_id ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute (
 "SELECT series.serie_id, series_temp.temp_id, '', '', '', '', series_temp.link, 'quality', series.nombre, series_temp.anno, series.sinopsis, series.caratula, series.poster, series_temp.sinopsis, series_temp.caratula, series_temp.poster, series.category, series.active FROM series INNER JOIN series_temp ON series.serie_id=series_temp.serie_id where series_temp.serie_id=? AND series_temp.temp_id=?" ,
 ( serie_id , temp_id , ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 29 - 29: oo * o00oO0oo0O0O0
 IIIi1i1i = OoOO00oo ( Ii111I [ 0 ] [ 10 ] , Ii111I [ 0 ] [ 11 ] , Ii111I [ 0 ] [ 12 ] , Ii111I [ 0 ] [ 13 ] , Ii111I [ 0 ] [ 14 ] , Ii111I [ 0 ] [ 15 ] )
 i1iiI11 = ithil . ooO0O0O ( Ii111I [ 0 ] [ 6 ] , i11i , serie_id , temp_id )
 IIIIiIi1IIi = [ None ] * len ( i1iiI11 )
 if 93 - 93: oo0o % II + oo % oo % I1IiI1III11i
 for iii1IiI in xrange ( 0 , len ( i1iiI11 ) ) :
  if 16 - 16: Ii + i1iI1 . IiII1i1I
  IIIIiIi1IIi [ iii1IiI ] = list ( Ii111I [ 0 ] [ : len ( Ii111I [ 0 ] ) ] )
  IIIIiIi1IIi [ iii1IiI ] [ 10 ] = IIIi1i1i [ 0 ]
  IIIIiIi1IIi [ iii1IiI ] [ 11 ] = IIIi1i1i [ 1 ]
  IIIIiIi1IIi [ iii1IiI ] [ 12 ] = IIIi1i1i [ 2 ]
  IIIIiIi1IIi [ iii1IiI ] [ 6 ] = i1iiI11 [ iii1IiI ] [ 1 ]
  IIIIiIi1IIi [ iii1IiI ] [ 8 ] = i1iiI11 [ iii1IiI ] [ 0 ]
  IIIIiIi1IIi [ iii1IiI ] [ 10 ] = ''
  if 66 - 66: ii1I1ii1IiIi1 % IIII
  if 16 - 16: i1iI1 / I1IiI1III11i * IIoooO0ooO0oo - i1iI1
  if 20 - 20: Ii1I % IiII1i1I - iiIIi1i1Iii / oo + OOoOoO0o0o0OO % iiIIi1i1Iii
  IIIIiIi1IIi [ iii1IiI ] [ 15 ] = Ii111I [ 0 ] [ 16 ]
  IIIIiIi1IIi [ iii1IiI ] [ 16 ] = Ii111I [ 0 ] [ 17 ]
  if 94 - 94: OOoOoO0o0o0OO
  if 78 - 78: ii1I1ii1IiIi1 . oo / ooOooO0OOO
 OooO00OOo0OOO ( IIIIiIi1IIi , Iii1 )
 if 54 - 54: OOO % oOO . II % IiII1i1I % oo0o - I1IiI1III11i
 if 23 - 23: oo + OOoOoO0o0o0OO % OOoOoO0o0o0OO % OOoOoO0o0o0OO
 if 3 - 3: IIoooO0ooO0oo * OOO
def II1Ii1I ( serie_id ) :
 Ii111I = O000o000o0Oo ( "series" ,
 [ "serie_id" , "''" , "''" , "''" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "updated" , "''" , "category" , "active" , "tmdb"
 ] , [ "serie_id" ] , [ serie_id ] , [ 'serie_id' ] )
 if 51 - 51: oo0o - OOO
 if 12 - 12: IIII - oo0o + IiII1IiI + OOO % II + IIoooO0ooO0oo
 i1iiI11 = ithil . ooO0O0O ( Ii111I [ 0 ] [ 6 ] , i11i , serie_id )
 IIIIiIi1IIi = [ None ] * len ( i1iiI11 )
 for iii1IiI in xrange ( 0 , len ( i1iiI11 ) ) :
  IIIIiIi1IIi [ iii1IiI ] = list ( Ii111I [ 0 ] [ : ] )
  IIIIiIi1IIi [ iii1IiI ] [ 6 ] = i1iiI11 [ iii1IiI ] [ 1 ]
  IIIIiIi1IIi [ iii1IiI ] [ 8 ] = i1iiI11 [ iii1IiI ] [ 0 ]
  IIIIiIi1IIi [ iii1IiI ] [ 10 ] = ''
 OooO00OOo0OOO ( IIIIiIi1IIi , Iii1 )
 if 11 - 11: Ii . IiII1IiI * oooOoO - iiIIi1i1Iii % oOO
 if 5 - 5: I1IiI1III11i - I1 . i1iI1 % OOO / o00oO0oo0O0O0 / IiII1IiI
 if 83 - 83: oo / i1iI1 / I1 % Ii1I . iiIIi1i1Iii
def oO0ooO0oOO0 ( ) :
 i1Ii11i = [ ]
 for iii1IiI in range ( 0 , 10 ) :
  O00oo = datetime . datetime . now ( ) . year - iii1IiI
  iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , O00oo )
  OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
  I1Iiii = '{0}?action={1}&anno={2}' . format ( I1iI11I , "ultimas_pelis_anyo_detail" , O00oo )
  iIi1Ii = True
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 43 - 43: Ii1I % IIII / OOoOoO0o0o0OO - IiII1i1I
def oOo0 ( action , params ) :
 if 'sql_limit' in params :
  IIi1IiIi1I1 = params [ 'sql_limit' ]
 else :
  IIi1IiIi1I1 = ''
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "Select anno,count(peli_id) from pelis %s group by anno order by anno desc %s" % ( params [ 'sql_cond' ] , IIi1IiIi1I1 ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  O00oo = III1I1iI1I1iI [ 0 ]
  iiiO000Oo = III1I1iI1I1iI [ 1 ]
  iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR] (%s)' % ( i1IiI1iii , O00oo , iiiO000Oo )
  OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
  I1Iiii = '{0}?action={1}&anno={2}' . format ( I1iI11I , action , O00oo )
  iIi1Ii = True
  i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 13 - 13: i1iI1
 if 7 - 7: Ii
def OOo0ooOo0 ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 if 25 - 25: OOoOoO0o0o0OO + I1 - oo0o / o00oO0oo0O0O0 * iiIIi1i1Iii / II
 IIiIii1IiI1i . execute ( base64 . urlsafe_b64decode ( "c2VsZWN0IGdyb3VwX2NvbmNhdChzYWdhLCAnIycpIGZyb20gcGVsaXMgb3JkZXIgYnkgc2FnYSBhc2M=" ) )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 58 - 58: OOoOoO0o0o0OO . o00oO0oo0O0O0
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  if 36 - 36: i1iI1 % oo0o
  if ( III1I1iI1I1iI != '' and III1I1iI1I1iI != ' ' ) :
   iiIIii11i1Ii = III1I1iI1I1iI
   try :
    iiIIii11i1Ii = iiIIii11i1Ii . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , iiIIii11i1Ii )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=saga_detail&saga={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( iiIIii11i1Ii ) )
   iIi1Ii = True
   iIIi1IIII = II1Ii11i1Ii1I ( base64 . urlsafe_b64encode ( iiIIii11i1Ii ) )
   if len ( iIIi1IIII ) > 0 :
    OoOO0OO0o0O . addContextMenuItems ( iIIi1IIII )
    if 48 - 48: o00oO0oo0O0O0 + oOO % IiII1i1I * II - OOO
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 10 - 10: oo0o / oo0o - I1IiI1III11i + Ii % II + oooOoO
 if 96 - 96: o00oO0oo0O0O0 % Ii1I - I1 . i1iI1
def IiII1iiII1 ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select group_concat(lower(tags), '#') from pelis order by peli_id asc" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 2 - 2: oooOoO / IiII1i1I
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 if 23 - 23: oooOoO
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  oo0OO = III1I1iI1I1iI
  if oo0OO != '' :
   if 2 - 2: Ii
   try :
    oo0OO = oo0OO . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , oo0OO . capitalize ( ) )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=genero_detail&genero={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( oo0OO ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 88 - 88: o00oO0oo0O0O0 * oo % OOO
 if 83 - 83: I1 / ooOooO0OOO + oOO * IiII1i1I % I1
def III1IIiII11 ( ) :
 oOoO0O00000 = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = oOoO0O00000 . cursor ( )
 IIiIii1IiI1i . execute ( "select group_concat(lower(genero), '#') from pelis order by peli_id asc" )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 oOoO0O00000 . close ( )
 if 10 - 10: o00oO0oo0O0O0 * IIoooO0ooO0oo * OOoOoO0o0o0OO
 Ii111I = sorted ( set ( Ii111I [ 0 ] [ 0 ] . split ( '#' ) ) )
 if 90 - 90: oooOoO - IiII1i1I % IiII1IiI
 i1Ii11i = [ ]
 for III1I1iI1I1iI in Ii111I :
  oo0OO = III1I1iI1I1iI
  if oo0OO != '' :
   if 50 - 50: OOO - IIoooO0ooO0oo - oo / o00oO0oo0O0O0 / i1iI1 . Ii
   try :
    oo0OO = oo0OO . encode ( 'utf-8' , 'ignore' )
   except ( UnicodeEncodeError , UnicodeDecodeError ) :
    pass
   iI11iiIi1I1iI = '[COLOR %s]%s[/COLOR]' % ( i1IiI1iii , oo0OO . capitalize ( ) )
   OoOO0OO0o0O = xbmcgui . ListItem ( label = iI11iiIi1I1iI , iconImage = '' )
   I1Iiii = '{0}?action=genero_detail&genero={1}' . format ( I1iI11I , base64 . urlsafe_b64encode ( oo0OO ) )
   iIi1Ii = True
   i1Ii11i . append ( ( I1Iiii , OoOO0OO0o0O , iIi1Ii ) )
 try :
  xbmcplugin . setContent ( iiIIiiII1 , "files" )
  OOo000Oo ( o0o0000O0 )
 except :
  pass
 xbmcplugin . addDirectoryItems ( iiIIiiII1 , i1Ii11i , len ( i1Ii11i ) )
 xbmcplugin . endOfDirectory ( iiIIiiII1 )
 if 83 - 83: oo * i1iI1 % OOO . II * ooOooO0OOO . iiIIi1i1Iii
 if 3 - 3: oo0o - I1 - ooOooO0OOO - Ii1I
def I1IiII1IiiI1I ( saga , params ) :
 params [ 'sql_group' ] = ' group_id'
 params [ 'anno' ] = 'true'
 params [ 'puntos' ] = 'true'
 params [ 'action' ] = 'saga_detail'
 params [ 'actionParams' ] = 'saga=' + saga
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O00 ( "pelis" , "saga" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "saga" ] , base64 . urlsafe_b64decode ( saga ) . decode ( 'utf-8' ) , [ 'nombre' ] , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 18 - 18: Ii1I / I1
def OO0OO0OO ( gen , params ) :
 params [ 'sql_group' ] = ' group_id'
 params [ 'anno' ] = 'true'
 params [ 'puntos' ] = 'true'
 params [ 'action' ] = 'genero_detail'
 params [ 'actionParams' ] = 'genero=' + gen
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O00 ( "pelis" , "genero" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" ,
 "anno" , "sinopsis" ,
 "caratula" , "poster" ,
 "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "genero" ] , base64 . urlsafe_b64decode ( gen ) . decode ( 'utf-8' ) , [ 'nombre' ] , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 85 - 85: OOO . ii1I1ii1IiIi1 / IIoooO0ooO0oo
def oo0oOoooO0O ( anno , order , params ) :
 params [ 'actionParams' ] = 'anno=' + anno
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "anno" ] , [ anno ] , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 63 - 63: OOO
def OoooOOOoOo ( category , order , params = { } ) :
 params [ 'actionParams' ] = 'category=' + category [ 0 ]
 params [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
 if 'page' in params and 'c_page' in params :
  params [ 'sql_cond' ] = base64 . urlsafe_b64decode ( params [ 'page' ] ) . decode ( 'utf-8' )
 else :
  oo0 = 1
  params [ 'c_page' ] = oo0
 Ii111I = O000o000o0Oo ( "pelis" ,
 [ "peli_id" , "audio" , "''" , "tags" , "''" , "''" , "link" , "'quality'" , "nombre" , "anno" , "sinopsis" ,
 "caratula" , "poster" , "strftime('%Y-%m-%d',updated), puntos, category, active, tmdb" ,
 "group_id" , "count(*)" , "group_concat(tags,'#')" , "group_concat(audio,'#')"
 ] , [ "category" ] , category , order , params )
 OooO00OOo0OOO ( Ii111I , 'pelis' , info = params )
 if 52 - 52: oooOoO % IiII1i1I + IIoooO0ooO0oo
def O00 ( table , column_cond , values , id , id_value , order , params = { } ) :
 iIII = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = iIII . cursor ( )
 if params and 'sql_limit' in params :
  IIi1IiIi1I1 = params [ 'sql_limit' ]
 else :
  IIi1IiIi1I1 = ''
 if params and 'sql_group' in params :
  iIiI111i11II = ' group by ' + params [ 'sql_group' ]
 else :
  iIiI111i11II = ''
 if params and 'sql_cond' in params :
  ii1III111ii = ' and ' + params [ 'sql_cond' ]
 else :
  ii1III111ii = ''
  if 38 - 38: I1 . IiII1i1I * Ii1I
 IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( id ) + " FROM " + table + " WHERE active > 0 " + ii1III111ii + " and ( " + column_cond + " like '" + id_value + "' or " + column_cond + " like '" + id_value + "#%' or " + column_cond + " like '%#" + id_value + "' or " + column_cond + " like '%#" + id_value + "#%') " + iIiI111i11II + " order by " + "," . join ( order ) + IIi1IiIi1I1 )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 iIII . close ( )
 return Ii111I
 if 51 - 51: IIII - OOoOoO0o0o0OO
def O000o000o0Oo ( table , values , ids , ids_value , order , params = '' ) :
 if 98 - 98: OOoOoO0o0o0OO * oo % Ii * II % Ii1I
 ii1III111ii = ''
 IIi1IiIi1I1 = ''
 iIiI111i11II = ''
 if 57 - 57: II + oooOoO + II + I1IiI1III11i
 if params and 'sql_limit' in params :
  IIi1IiIi1I1 = params [ 'sql_limit' ]
 if params and 'sql_cond' in params :
  if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
   ii1III111ii = ' where ' + params [ 'sql_cond' ]
  else :
   ii1III111ii = params [ 'sql_cond' ] + ' and '
 if params and 'sql_group' in params :
  iIiI111i11II = ' group by ' + params [ 'sql_group' ]
 iIII = sqlite3 . connect ( i11i )
 IIiIii1IiI1i = iIII . cursor ( )
 if len ( ids ) == len ( ids_value ) and len ( ids ) == 0 :
  if 25 - 25: o00oO0oo0O0O0
  IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + " FROM " + table + ii1III111ii + iIiI111i11II + " order by " + "," . join ( order ) + IIi1IiIi1I1 )
 else :
  if 53 - 53: oo / oooOoO / I1IiI1III11i / I1IiI1III11i
  IIiIii1IiI1i . execute ( "SELECT " + "," . join ( values ) + "," + "," . join ( ids ) + " FROM " + table + " WHERE " + ii1III111ii + (
 " = ? and " . join ( ids ) + "=?" ) + iIiI111i11II + " order by " + "," . join ( order ) + IIi1IiIi1I1 , ids_value )
 Ii111I = IIiIii1IiI1i . fetchall ( )
 iIII . close ( )
 return Ii111I
 if 72 - 72: i1iI1
def IIi11iI11II1 ( lin , tit , id , type , params ) :
 ithil . IIi ( lin , tit , i11i , id , type , 'play' , params )
 if 31 - 31: i1iI1
 if 18 - 18: I1IiI1III11i + IiII1i1I % oo0o * ii1I1ii1IiIi1
def i1iiIii1iiiIi ( paramstring ) :
 Oo0O0oOO00 = dict ( parse_qsl ( paramstring ) )
 if Oo0O0oOO00 :
  if Oo0O0oOO00 [ oOOO0O0 ] == Iii1 :
   Ooo00o0oo0o ( '==' , 'general' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_dibujos' :
   Ooo00o0oo0o ( 'like' , '%dibujos%' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_retro' :
   Ooo00o0oo0o ( '==' , 'retro' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_documentales' :
   Ooo00o0oo0o ( 'like' , '%documental%' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_musica' :
   Ooo00o0oo0o ( 'like' , '%musica%' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'telenovelas' :
   Ooo00o0oo0o ( 'like' , '%telenovela%' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_anime' :
   Ooo00o0oo0o ( 'like' , '%anime%' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'searchSerie' :
   IIII1I ( IIi11Ii1 , 'series' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'searchPeli' :
   IIII1I ( iiI1111IIiiI , 'pelis' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'seriesByLang' :
   if 'lang' in Oo0O0oOO00 :
    O0O00OooO00O ( Oo0O0oOO00 [ 'lang' ] , 'series' , Oo0O0oOO00 )
   else :
    O0O00OooO00O ( None , 'series' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelisByLang' :
   if 'lang' in Oo0O0oOO00 :
    O0O00OooO00O ( Oo0O0oOO00 [ 'lang' ] , 'pelis' , Oo0O0oOO00 )
   else :
    O0O00OooO00O ( None , 'pelis' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'seriesByAZ' :
   oOOO0o ( Oo0O0oOO00 , 'serie' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_mas_vistas' :
   i11iIIi ( "views" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_mas_vistas_mes' :
   i11iIIi ( "last_month_views" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelis_mas_vistas' :
   OooOoOooo ( [ 'sum(views) desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelis_mas_vistas_mes' :
   OooOoOooo ( [ 'sum(last_month_views) desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelis_dibujos_mas_vistas' :
   OooOoOooo ( [ 'sum(views) desc' ] , { "sql_cond" : "  category = 'Dibujos' and active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelis_dibujos_mas_vistas_mes' :
   OooOoOooo ( [ 'sum(last_month_views) desc' ] , { "sql_cond" : " category = 'Dibujos' and active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'anno' : 'true' , "puntos" : "true" } )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'ultimas_series' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category not in ('Documental', 'Musica', 'Anime')" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'ultimas_series_anime' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Anime')" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'ultimos_documentales' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Documental')" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'ultimas_musicas' :
   iI1IiiII1iI ( IIi11Ii1 , 'series' , "and category = ('Musica')" )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'ultimas_pelis' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   Oo0O0oOO00 [ 'date' ] = 'true'
   OoooOOOoOo ( [ 'Pelicula' ] , [ 'updated desc' , 'anno desc' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'serie' :
   O0O ( Oo0O0oOO00 [ 'serie_id' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'addDownload' :
   OoO0ooOOO ( Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'addfav' :
   iioO0oo00O0O ( Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'addfavs' :
   iioO0oo00O0O ( Oo0O0oOO00 , favoritos = iiIii1IIi1I )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'addfavp' :
   iioO0oo00O0O ( Oo0O0oOO00 , favoritos = iIIiIiI1I1I )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'addfavd' :
   iioO0oo00O0O ( Oo0O0oOO00 , favoritos = iiI1IiI1iiII1 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'rmfav' :
   OoOOoOO0 ( Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'rmfavp' :
   OoOOoOO0 ( Oo0O0oOO00 , favoritos = iIIiIiI1I1I )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'rmfavd' :
   OoOOoOO0 ( Oo0O0oOO00 , favoritos = iiI1IiI1iiII1 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'rmfavs' :
   OoOOoOO0 ( Oo0O0oOO00 , favoritos = iiIii1IIi1I )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'listfav' :
   O00000 ( iIiIiiiIi1I1I , fav = i11iii , favLiteral = '' , text = '' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'listfavs' :
   O00000 ( iiIii1IIi1I , fav = i11 , favLiteral = 's' , text = 'Series' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'listfavp' :
   O00000 ( iIIiIiI1I1I , fav = IiiIi11iIII1 , favLiteral = 'p' , text = 'Pelis' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'listfavd' :
   O00000 ( iiI1IiI1iiII1 , fav = ooIIII , favLiteral = 'd' , text = 'Dibujos' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'to_unwatch' :
   i1II1 ( Oo0O0oOO00 [ 'idFile' ] , Oo0O0oOO00 [ 'idPath' ] , Oo0O0oOO00 [ 'fileName' ] , False )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'to_watch' :
   i1II1 ( Oo0O0oOO00 [ 'idFile' ] , Oo0O0oOO00 [ 'idPath' ] , Oo0O0oOO00 [ 'fileName' ] , True )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'to_saga' :
   O0oo00 ( Oo0O0oOO00 [ 'saga' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'view_serie' :
   II1Ii1I ( Oo0O0oOO00 [ 'serie_id' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'view_temp' :
   Oo0o ( Oo0O0oOO00 [ 'serie_id' ] , Oo0O0oOO00 [ 'temp_id' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'list_temp' :
   ooO0 ( Oo0O0oOO00 [ 'serie_id' ] , Oo0O0oOO00 [ 'temp_id' ] , Oo0O0oOO00 [ 'caratula' ] , Oo0O0oOO00 [ 'poster' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'play' :
   IIi11iI11II1 ( Oo0O0oOO00 [ 'lin' ] , Oo0O0oOO00 [ 'tit' ] , Oo0O0oOO00 [ 'id' ] , Oo0O0oOO00 [ 'type' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'anyo' :
   Oo0O0oOO00 [ 'sql_cond' ] = "where active > 0"
   oOo0 ( 'anyo_detail' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'anyo_detail' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = " group_id"
   Oo0O0oOO00 [ 'puntos' ] = "true"
   oo0oOoooO0O ( Oo0O0oOO00 [ 'anno' ] , [ 'nombre asc' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'ultimas_pelis_anyo' :
   oO0ooO0oOO0 ( )
  elif Oo0O0oOO00 [ 'action' ] == 'ultimas_pelis_anyo_detail' :
   oo0oOoooO0O ( Oo0O0oOO00 [ 'anno' ] , [ 'updated desc' ] , { "sql_cond" : "  active > 0 " , 'sql_group' : ' group_id' , 'sql_limit' : ' limit ' + str ( ooo0ooOoO0Oo ) , 'date' : 'true' , "puntos" : "true" } )
  elif Oo0O0oOO00 [ 'action' ] == 'anyo_top' :
   Oo0O0oOO00 [ 'sql_cond' ] = "where active > 0 and puntos > 0"
   oOo0 ( 'anyo_top_detail' , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'anyo_top_detail' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 and puntos > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = " group_id"
   Oo0O0oOO00 [ 'puntos' ] = "true"
   Oo0O0oOO00 [ 'sql_limit' ] = ' limit ' + str ( ooo0ooOoO0Oo )
   oo0oOoooO0O ( Oo0O0oOO00 [ 'anno' ] , [ 'puntos desc' , 'nombre asc' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'sagas' :
   OOo0ooOo0 ( )
  elif Oo0O0oOO00 [ 'action' ] == 'saga_detail' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   I1IiII1IiiI1I ( Oo0O0oOO00 [ 'saga' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ 'action' ] == 'list_generos' :
   III1IIiII11 ( )
  elif Oo0O0oOO00 [ 'action' ] == 'genero_detail' :
   OO0OO0OO ( Oo0O0oOO00 [ 'genero' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'peli_inf' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   OoooOOOoOo ( [ 'Dibujos' ] , [ 'nombre' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'peli_anime' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   OoooOOOoOo ( [ 'Anime' ] , [ 'nombre' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'top_peli_inf' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   OoooOOOoOo ( [ 'Dibujos' ] , [ 'puntos desc' , 'nombre asc' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelisByAZ' :
   oOOO0o ( Oo0O0oOO00 , 'peli' )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'last_peli_inf' :
   Oo0O0oOO00 [ 'sql_cond' ] = "  active > 0 "
   Oo0O0oOO00 [ 'sql_group' ] = ' group_id'
   Oo0O0oOO00 [ 'puntos' ] = 'true'
   Oo0O0oOO00 [ 'date' ] = 'true'
   Oo0O0oOO00 [ 'anno' ] = 'true'
   OoooOOOoOo ( [ 'Dibujos' ] , [ 'updated desc' , 'anno desc' ] , Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'series_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Series' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'pelis_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Pelis' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'dibujos_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Dibujos' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'anime_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Anime' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'documentales_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Documental' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'musica_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Musica' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'herramientas_menu' :
   iIi1iiIiIi ( I1I1i1i11I1i ( 'Herramientas' ) )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'validateFolderConfig' :
   oOo ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'clean' :
   oO0oO ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'downloads' :
   Iii1oO00o0000OO0O ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'playLocal' :
   iiIIiiII1 = int ( sys . argv [ 1 ] )
   i111ii = xbmcgui . ListItem ( path = base64 . urlsafe_b64decode ( Oo0O0oOO00 [ 'path' ] ) )
   if 11 - 11: IIII / OOoOoO0o0o0OO * i1iI1 . IIII - ii1I1ii1IiIi1
   xbmcplugin . setResolvedUrl ( iiIIiiII1 , True , i111ii )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'rmDownload' :
   oooo0o ( Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'validateCredentials' :
   i1I ( Oo0O0oOO00 [ 'url' ] )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'createCopy' :
   O0O000o ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'restoreCopy' :
   oOOoOO ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'openSettings' :
   __settings__ . openSettings ( )
  elif Oo0O0oOO00 [ oOOO0O0 ] == 'install' :
   ooo0O000oOo0 ( Oo0O0oOO00 )
  elif Oo0O0oOO00 [ oOOO0O0 ] == IiIIi1I1Ii :
   O0OOoOo ( Oo0O0oOO00 )
 else :
  if 41 - 41: i1iI1 * OOoOoO0o0o0OO . o00oO0oo0O0O0 / oo
  I1iII1i1i ( i11i )
  iIi1iiIiIi ( I1I1i1i11I1i ( "default" ) )
  if 100 - 100: oo0o / IIoooO0ooO0oo + oOO . oooOoO . OOoOoO0o0o0OO + Ii
  if 7 - 7: o00oO0oo0O0O0 / iiIIi1i1Iii . oo0o
if __name__ == '__main__' :
 i1iiIii1iiiIi ( sys . argv [ 2 ] [ 1 : ] )
 if 24 - 24: ii1I1ii1IiIi1 - iiIIi1i1Iii * Ii - i1iI1 / OOoOoO0o0o0OO / oooOoO
 if 63 - 63: ii1I1ii1IiIi1 . I1 . IiII1IiI * IiII1i1I / ooOooO0OOO
 if 94 - 94: Ii1I
 if 4 - 4: IiII1IiI % I1IiI1III11i . I1IiI1III11i
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')